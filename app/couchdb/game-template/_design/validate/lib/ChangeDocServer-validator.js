"use strict";module.exports = validate20;module.exports.default = validate20;const schema22 = {"$schema":"http://json-schema.org/draft-07/schema#","definitions":{"Add<MoveData>":{"properties":{"new":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"type":["string","number"]}]},"type":{"enum":["add"],"type":"string"}},"required":["new","type"],"type":"object"},"Add<PropData>":{"properties":{"new":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"items":{"$ref":"#/definitions/MoveOrder"},"type":"array"},{"type":["string","number"]}]},"type":{"enum":["add"],"type":"string"}},"required":["new","type"],"type":"object"},"Add<string>":{"properties":{"new":{"type":"string"},"type":{"enum":["add"],"type":"string"}},"required":["new","type"],"type":"object"},"Delete<MoveData>":{"properties":{"old":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"type":["string","number"]}]},"type":{"enum":["delete"],"type":"string"}},"required":["old","type"],"type":"object"},"Delete<PropData>":{"properties":{"old":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"items":{"$ref":"#/definitions/MoveOrder"},"type":"array"},{"type":["string","number"]}]},"type":{"enum":["delete"],"type":"string"}},"required":["old","type"],"type":"object"},"Delete<string>":{"properties":{"old":{"type":"string"},"type":{"enum":["delete"],"type":"string"}},"required":["old","type"],"type":"object"},"Modify<MoveData>":{"properties":{"new":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"type":["string","number"]}]},"old":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"type":["string","number"]}]},"type":{"enum":["modify"],"type":"string"}},"required":["new","old","type"],"type":"object"},"Modify<MoveOrder[]>":{"properties":{"new":{"items":{"$ref":"#/definitions/MoveOrder"},"type":"array"},"old":{"items":{"$ref":"#/definitions/MoveOrder"},"type":"array"},"type":{"enum":["modify"],"type":"string"}},"required":["new","old","type"],"type":"object"},"Modify<PropData>":{"properties":{"new":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"items":{"$ref":"#/definitions/MoveOrder"},"type":"array"},{"type":["string","number"]}]},"old":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"items":{"$ref":"#/definitions/MoveOrder"},"type":"array"},{"type":["string","number"]}]},"type":{"enum":["modify"],"type":"string"}},"required":["new","old","type"],"type":"object"},"MoveChanges":{"additionalProperties":{"anyOf":[{"$ref":"#/definitions/Modify<MoveData>"},{"$ref":"#/definitions/Add<MoveData>"},{"$ref":"#/definitions/Delete<MoveData>"}]},"properties":{"moveName":{"anyOf":[{"$ref":"#/definitions/Add<string>"},{"$ref":"#/definitions/Delete<string>"}]},"moveOrder":false},"type":"object"},"MoveOrder":{"properties":{"indent":{"type":"number"},"isCategory":{"enum":[true],"type":"boolean"},"name":{"type":"string"}},"required":["name"],"type":"object"},"PropChanges":{"additionalProperties":{"anyOf":[{"$ref":"#/definitions/Modify<PropData>"},{"$ref":"#/definitions/Add<PropData>"},{"$ref":"#/definitions/Delete<PropData>"}]},"properties":{"moveName":false,"moveOrder":{"$ref":"#/definitions/Modify<MoveOrder[]>"}},"type":"object"}},"properties":{"baseRevision":{"type":"string"},"createdAt":{"type":"string"},"createdBy":{"type":"string"},"moveChanges":{"additionalProperties":{"$ref":"#/definitions/MoveChanges"},"type":"object"},"previousChange":{"type":"string"},"universalPropChanges":{"$ref":"#/definitions/PropChanges"},"updateDescription":{"type":"string"},"updateTitle":{"type":"string"},"updateVersion":{"type":"string"}},"required":["baseRevision","createdAt","createdBy","updateTitle"],"type":"object"};const schema23 = {"additionalProperties":{"anyOf":[{"$ref":"#/definitions/Modify<MoveData>"},{"$ref":"#/definitions/Add<MoveData>"},{"$ref":"#/definitions/Delete<MoveData>"}]},"properties":{"moveName":{"anyOf":[{"$ref":"#/definitions/Add<string>"},{"$ref":"#/definitions/Delete<string>"}]},"moveOrder":false},"type":"object"};const schema24 = {"properties":{"new":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"type":["string","number"]}]},"old":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"type":["string","number"]}]},"type":{"enum":["modify"],"type":"string"}},"required":["new","old","type"],"type":"object"};const schema25 = {"properties":{"new":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"type":["string","number"]}]},"type":{"enum":["add"],"type":"string"}},"required":["new","type"],"type":"object"};const schema26 = {"properties":{"old":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"type":["string","number"]}]},"type":{"enum":["delete"],"type":"string"}},"required":["old","type"],"type":"object"};const schema27 = {"properties":{"new":{"type":"string"},"type":{"enum":["add"],"type":"string"}},"required":["new","type"],"type":"object"};const schema28 = {"properties":{"old":{"type":"string"},"type":{"enum":["delete"],"type":"string"}},"required":["old","type"],"type":"object"};function validate21(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){const _errs1 = errors;for(const key0 in data){if(!((key0 === "moveName") || (key0 === "moveOrder"))){let data0 = data[key0];const _errs2 = errors;const _errs3 = errors;let valid1 = false;const _errs4 = errors;const _errs5 = errors;if(errors === _errs5){if(data0 && typeof data0 == "object" && !Array.isArray(data0)){let missing0;if((((data0.new === undefined) && (missing0 = "new")) || ((data0.old === undefined) && (missing0 = "old"))) || ((data0.type === undefined) && (missing0 = "type"))){const err0 = {instancePath:instancePath+"/" + key0.replace(/~/g, "~0").replace(/\//g, "~1"),schemaPath:"#/definitions/Modify<MoveData>/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"};if(vErrors === null){vErrors = [err0];}else {vErrors.push(err0);}errors++;}else {if(data0.new !== undefined){let data1 = data0.new;const _errs7 = errors;const _errs8 = errors;let valid4 = false;const _errs9 = errors;if(errors === _errs9){if(Array.isArray(data1)){var valid5 = true;const len0 = data1.length;for(let i0=0; i0<len0; i0++){const _errs11 = errors;if(typeof data1[i0] !== "string"){const err1 = {instancePath:instancePath+"/" + key0.replace(/~/g, "~0").replace(/\//g, "~1")+"/new/" + i0,schemaPath:"#/definitions/Modify<MoveData>/properties/new/anyOf/0/items/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err1];}else {vErrors.push(err1);}errors++;}var valid5 = _errs11 === errors;if(!valid5){break;}}}else {const err2 = {instancePath:instancePath+"/" + key0.replace(/~/g, "~0").replace(/\//g, "~1")+"/new",schemaPath:"#/definitions/Modify<MoveData>/properties/new/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};if(vErrors === null){vErrors = [err2];}else {vErrors.push(err2);}errors++;}}var _valid1 = _errs9 === errors;valid4 = valid4 || _valid1;if(!valid4){const _errs13 = errors;if((typeof data1 !== "string") && (!((typeof data1 == "number") && (isFinite(data1))))){const err3 = {instancePath:instancePath+"/" + key0.replace(/~/g, "~0").replace(/\//g, "~1")+"/new",schemaPath:"#/definitions/Modify<MoveData>/properties/new/anyOf/1/type",keyword:"type",params:{type: schema24.properties.new.anyOf[1].type},message:"must be string,number"};if(vErrors === null){vErrors = [err3];}else {vErrors.push(err3);}errors++;}var _valid1 = _errs13 === errors;valid4 = valid4 || _valid1;}if(!valid4){const err4 = {instancePath:instancePath+"/" + key0.replace(/~/g, "~0").replace(/\//g, "~1")+"/new",schemaPath:"#/definitions/Modify<MoveData>/properties/new/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};if(vErrors === null){vErrors = [err4];}else {vErrors.push(err4);}errors++;}else {errors = _errs8;if(vErrors !== null){if(_errs8){vErrors.length = _errs8;}else {vErrors = null;}}}var valid3 = _errs7 === errors;}else {var valid3 = true;}if(valid3){if(data0.old !== undefined){let data3 = data0.old;const _errs15 = errors;const _errs16 = errors;let valid6 = false;const _errs17 = errors;if(errors === _errs17){if(Array.isArray(data3)){var valid7 = true;const len1 = data3.length;for(let i1=0; i1<len1; i1++){const _errs19 = errors;if(typeof data3[i1] !== "string"){const err5 = {instancePath:instancePath+"/" + key0.replace(/~/g, "~0").replace(/\//g, "~1")+"/old/" + i1,schemaPath:"#/definitions/Modify<MoveData>/properties/old/anyOf/0/items/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err5];}else {vErrors.push(err5);}errors++;}var valid7 = _errs19 === errors;if(!valid7){break;}}}else {const err6 = {instancePath:instancePath+"/" + key0.replace(/~/g, "~0").replace(/\//g, "~1")+"/old",schemaPath:"#/definitions/Modify<MoveData>/properties/old/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};if(vErrors === null){vErrors = [err6];}else {vErrors.push(err6);}errors++;}}var _valid2 = _errs17 === errors;valid6 = valid6 || _valid2;if(!valid6){const _errs21 = errors;if((typeof data3 !== "string") && (!((typeof data3 == "number") && (isFinite(data3))))){const err7 = {instancePath:instancePath+"/" + key0.replace(/~/g, "~0").replace(/\//g, "~1")+"/old",schemaPath:"#/definitions/Modify<MoveData>/properties/old/anyOf/1/type",keyword:"type",params:{type: schema24.properties.old.anyOf[1].type},message:"must be string,number"};if(vErrors === null){vErrors = [err7];}else {vErrors.push(err7);}errors++;}var _valid2 = _errs21 === errors;valid6 = valid6 || _valid2;}if(!valid6){const err8 = {instancePath:instancePath+"/" + key0.replace(/~/g, "~0").replace(/\//g, "~1")+"/old",schemaPath:"#/definitions/Modify<MoveData>/properties/old/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};if(vErrors === null){vErrors = [err8];}else {vErrors.push(err8);}errors++;}else {errors = _errs16;if(vErrors !== null){if(_errs16){vErrors.length = _errs16;}else {vErrors = null;}}}var valid3 = _errs15 === errors;}else {var valid3 = true;}if(valid3){if(data0.type !== undefined){let data5 = data0.type;const _errs23 = errors;if(typeof data5 !== "string"){const err9 = {instancePath:instancePath+"/" + key0.replace(/~/g, "~0").replace(/\//g, "~1")+"/type",schemaPath:"#/definitions/Modify<MoveData>/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err9];}else {vErrors.push(err9);}errors++;}if(!(data5 === "modify")){const err10 = {instancePath:instancePath+"/" + key0.replace(/~/g, "~0").replace(/\//g, "~1")+"/type",schemaPath:"#/definitions/Modify<MoveData>/properties/type/enum",keyword:"enum",params:{allowedValues: schema24.properties.type.enum},message:"must be equal to one of the allowed values"};if(vErrors === null){vErrors = [err10];}else {vErrors.push(err10);}errors++;}var valid3 = _errs23 === errors;}else {var valid3 = true;}}}}}else {const err11 = {instancePath:instancePath+"/" + key0.replace(/~/g, "~0").replace(/\//g, "~1"),schemaPath:"#/definitions/Modify<MoveData>/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err11];}else {vErrors.push(err11);}errors++;}}var _valid0 = _errs4 === errors;valid1 = valid1 || _valid0;if(!valid1){const _errs25 = errors;const _errs26 = errors;if(errors === _errs26){if(data0 && typeof data0 == "object" && !Array.isArray(data0)){let missing1;if(((data0.new === undefined) && (missing1 = "new")) || ((data0.type === undefined) && (missing1 = "type"))){const err12 = {instancePath:instancePath+"/" + key0.replace(/~/g, "~0").replace(/\//g, "~1"),schemaPath:"#/definitions/Add<MoveData>/required",keyword:"required",params:{missingProperty: missing1},message:"must have required property '"+missing1+"'"};if(vErrors === null){vErrors = [err12];}else {vErrors.push(err12);}errors++;}else {if(data0.new !== undefined){let data6 = data0.new;const _errs28 = errors;const _errs29 = errors;let valid10 = false;const _errs30 = errors;if(errors === _errs30){if(Array.isArray(data6)){var valid11 = true;const len2 = data6.length;for(let i2=0; i2<len2; i2++){const _errs32 = errors;if(typeof data6[i2] !== "string"){const err13 = {instancePath:instancePath+"/" + key0.replace(/~/g, "~0").replace(/\//g, "~1")+"/new/" + i2,schemaPath:"#/definitions/Add<MoveData>/properties/new/anyOf/0/items/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err13];}else {vErrors.push(err13);}errors++;}var valid11 = _errs32 === errors;if(!valid11){break;}}}else {const err14 = {instancePath:instancePath+"/" + key0.replace(/~/g, "~0").replace(/\//g, "~1")+"/new",schemaPath:"#/definitions/Add<MoveData>/properties/new/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};if(vErrors === null){vErrors = [err14];}else {vErrors.push(err14);}errors++;}}var _valid3 = _errs30 === errors;valid10 = valid10 || _valid3;if(!valid10){const _errs34 = errors;if((typeof data6 !== "string") && (!((typeof data6 == "number") && (isFinite(data6))))){const err15 = {instancePath:instancePath+"/" + key0.replace(/~/g, "~0").replace(/\//g, "~1")+"/new",schemaPath:"#/definitions/Add<MoveData>/properties/new/anyOf/1/type",keyword:"type",params:{type: schema25.properties.new.anyOf[1].type},message:"must be string,number"};if(vErrors === null){vErrors = [err15];}else {vErrors.push(err15);}errors++;}var _valid3 = _errs34 === errors;valid10 = valid10 || _valid3;}if(!valid10){const err16 = {instancePath:instancePath+"/" + key0.replace(/~/g, "~0").replace(/\//g, "~1")+"/new",schemaPath:"#/definitions/Add<MoveData>/properties/new/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};if(vErrors === null){vErrors = [err16];}else {vErrors.push(err16);}errors++;}else {errors = _errs29;if(vErrors !== null){if(_errs29){vErrors.length = _errs29;}else {vErrors = null;}}}var valid9 = _errs28 === errors;}else {var valid9 = true;}if(valid9){if(data0.type !== undefined){let data8 = data0.type;const _errs36 = errors;if(typeof data8 !== "string"){const err17 = {instancePath:instancePath+"/" + key0.replace(/~/g, "~0").replace(/\//g, "~1")+"/type",schemaPath:"#/definitions/Add<MoveData>/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err17];}else {vErrors.push(err17);}errors++;}if(!(data8 === "add")){const err18 = {instancePath:instancePath+"/" + key0.replace(/~/g, "~0").replace(/\//g, "~1")+"/type",schemaPath:"#/definitions/Add<MoveData>/properties/type/enum",keyword:"enum",params:{allowedValues: schema25.properties.type.enum},message:"must be equal to one of the allowed values"};if(vErrors === null){vErrors = [err18];}else {vErrors.push(err18);}errors++;}var valid9 = _errs36 === errors;}else {var valid9 = true;}}}}else {const err19 = {instancePath:instancePath+"/" + key0.replace(/~/g, "~0").replace(/\//g, "~1"),schemaPath:"#/definitions/Add<MoveData>/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err19];}else {vErrors.push(err19);}errors++;}}var _valid0 = _errs25 === errors;valid1 = valid1 || _valid0;if(!valid1){const _errs38 = errors;const _errs39 = errors;if(errors === _errs39){if(data0 && typeof data0 == "object" && !Array.isArray(data0)){let missing2;if(((data0.old === undefined) && (missing2 = "old")) || ((data0.type === undefined) && (missing2 = "type"))){const err20 = {instancePath:instancePath+"/" + key0.replace(/~/g, "~0").replace(/\//g, "~1"),schemaPath:"#/definitions/Delete<MoveData>/required",keyword:"required",params:{missingProperty: missing2},message:"must have required property '"+missing2+"'"};if(vErrors === null){vErrors = [err20];}else {vErrors.push(err20);}errors++;}else {if(data0.old !== undefined){let data9 = data0.old;const _errs41 = errors;const _errs42 = errors;let valid14 = false;const _errs43 = errors;if(errors === _errs43){if(Array.isArray(data9)){var valid15 = true;const len3 = data9.length;for(let i3=0; i3<len3; i3++){const _errs45 = errors;if(typeof data9[i3] !== "string"){const err21 = {instancePath:instancePath+"/" + key0.replace(/~/g, "~0").replace(/\//g, "~1")+"/old/" + i3,schemaPath:"#/definitions/Delete<MoveData>/properties/old/anyOf/0/items/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err21];}else {vErrors.push(err21);}errors++;}var valid15 = _errs45 === errors;if(!valid15){break;}}}else {const err22 = {instancePath:instancePath+"/" + key0.replace(/~/g, "~0").replace(/\//g, "~1")+"/old",schemaPath:"#/definitions/Delete<MoveData>/properties/old/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};if(vErrors === null){vErrors = [err22];}else {vErrors.push(err22);}errors++;}}var _valid4 = _errs43 === errors;valid14 = valid14 || _valid4;if(!valid14){const _errs47 = errors;if((typeof data9 !== "string") && (!((typeof data9 == "number") && (isFinite(data9))))){const err23 = {instancePath:instancePath+"/" + key0.replace(/~/g, "~0").replace(/\//g, "~1")+"/old",schemaPath:"#/definitions/Delete<MoveData>/properties/old/anyOf/1/type",keyword:"type",params:{type: schema26.properties.old.anyOf[1].type},message:"must be string,number"};if(vErrors === null){vErrors = [err23];}else {vErrors.push(err23);}errors++;}var _valid4 = _errs47 === errors;valid14 = valid14 || _valid4;}if(!valid14){const err24 = {instancePath:instancePath+"/" + key0.replace(/~/g, "~0").replace(/\//g, "~1")+"/old",schemaPath:"#/definitions/Delete<MoveData>/properties/old/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};if(vErrors === null){vErrors = [err24];}else {vErrors.push(err24);}errors++;}else {errors = _errs42;if(vErrors !== null){if(_errs42){vErrors.length = _errs42;}else {vErrors = null;}}}var valid13 = _errs41 === errors;}else {var valid13 = true;}if(valid13){if(data0.type !== undefined){let data11 = data0.type;const _errs49 = errors;if(typeof data11 !== "string"){const err25 = {instancePath:instancePath+"/" + key0.replace(/~/g, "~0").replace(/\//g, "~1")+"/type",schemaPath:"#/definitions/Delete<MoveData>/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err25];}else {vErrors.push(err25);}errors++;}if(!(data11 === "delete")){const err26 = {instancePath:instancePath+"/" + key0.replace(/~/g, "~0").replace(/\//g, "~1")+"/type",schemaPath:"#/definitions/Delete<MoveData>/properties/type/enum",keyword:"enum",params:{allowedValues: schema26.properties.type.enum},message:"must be equal to one of the allowed values"};if(vErrors === null){vErrors = [err26];}else {vErrors.push(err26);}errors++;}var valid13 = _errs49 === errors;}else {var valid13 = true;}}}}else {const err27 = {instancePath:instancePath+"/" + key0.replace(/~/g, "~0").replace(/\//g, "~1"),schemaPath:"#/definitions/Delete<MoveData>/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err27];}else {vErrors.push(err27);}errors++;}}var _valid0 = _errs38 === errors;valid1 = valid1 || _valid0;}}if(!valid1){const err28 = {instancePath:instancePath+"/" + key0.replace(/~/g, "~0").replace(/\//g, "~1"),schemaPath:"#/additionalProperties/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};if(vErrors === null){vErrors = [err28];}else {vErrors.push(err28);}errors++;validate21.errors = vErrors;return false;}else {errors = _errs3;if(vErrors !== null){if(_errs3){vErrors.length = _errs3;}else {vErrors = null;}}}var valid0 = _errs2 === errors;if(!valid0){break;}}}if(_errs1 === errors){if(data.moveName !== undefined){let data12 = data.moveName;const _errs51 = errors;const _errs52 = errors;let valid17 = false;const _errs53 = errors;const _errs54 = errors;if(errors === _errs54){if(data12 && typeof data12 == "object" && !Array.isArray(data12)){let missing3;if(((data12.new === undefined) && (missing3 = "new")) || ((data12.type === undefined) && (missing3 = "type"))){const err29 = {instancePath:instancePath+"/moveName",schemaPath:"#/definitions/Add<string>/required",keyword:"required",params:{missingProperty: missing3},message:"must have required property '"+missing3+"'"};if(vErrors === null){vErrors = [err29];}else {vErrors.push(err29);}errors++;}else {if(data12.new !== undefined){const _errs56 = errors;if(typeof data12.new !== "string"){const err30 = {instancePath:instancePath+"/moveName/new",schemaPath:"#/definitions/Add<string>/properties/new/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err30];}else {vErrors.push(err30);}errors++;}var valid19 = _errs56 === errors;}else {var valid19 = true;}if(valid19){if(data12.type !== undefined){let data14 = data12.type;const _errs58 = errors;if(typeof data14 !== "string"){const err31 = {instancePath:instancePath+"/moveName/type",schemaPath:"#/definitions/Add<string>/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err31];}else {vErrors.push(err31);}errors++;}if(!(data14 === "add")){const err32 = {instancePath:instancePath+"/moveName/type",schemaPath:"#/definitions/Add<string>/properties/type/enum",keyword:"enum",params:{allowedValues: schema27.properties.type.enum},message:"must be equal to one of the allowed values"};if(vErrors === null){vErrors = [err32];}else {vErrors.push(err32);}errors++;}var valid19 = _errs58 === errors;}else {var valid19 = true;}}}}else {const err33 = {instancePath:instancePath+"/moveName",schemaPath:"#/definitions/Add<string>/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err33];}else {vErrors.push(err33);}errors++;}}var _valid5 = _errs53 === errors;valid17 = valid17 || _valid5;if(!valid17){const _errs60 = errors;const _errs61 = errors;if(errors === _errs61){if(data12 && typeof data12 == "object" && !Array.isArray(data12)){let missing4;if(((data12.old === undefined) && (missing4 = "old")) || ((data12.type === undefined) && (missing4 = "type"))){const err34 = {instancePath:instancePath+"/moveName",schemaPath:"#/definitions/Delete<string>/required",keyword:"required",params:{missingProperty: missing4},message:"must have required property '"+missing4+"'"};if(vErrors === null){vErrors = [err34];}else {vErrors.push(err34);}errors++;}else {if(data12.old !== undefined){const _errs63 = errors;if(typeof data12.old !== "string"){const err35 = {instancePath:instancePath+"/moveName/old",schemaPath:"#/definitions/Delete<string>/properties/old/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err35];}else {vErrors.push(err35);}errors++;}var valid21 = _errs63 === errors;}else {var valid21 = true;}if(valid21){if(data12.type !== undefined){let data16 = data12.type;const _errs65 = errors;if(typeof data16 !== "string"){const err36 = {instancePath:instancePath+"/moveName/type",schemaPath:"#/definitions/Delete<string>/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err36];}else {vErrors.push(err36);}errors++;}if(!(data16 === "delete")){const err37 = {instancePath:instancePath+"/moveName/type",schemaPath:"#/definitions/Delete<string>/properties/type/enum",keyword:"enum",params:{allowedValues: schema28.properties.type.enum},message:"must be equal to one of the allowed values"};if(vErrors === null){vErrors = [err37];}else {vErrors.push(err37);}errors++;}var valid21 = _errs65 === errors;}else {var valid21 = true;}}}}else {const err38 = {instancePath:instancePath+"/moveName",schemaPath:"#/definitions/Delete<string>/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err38];}else {vErrors.push(err38);}errors++;}}var _valid5 = _errs60 === errors;valid17 = valid17 || _valid5;}if(!valid17){const err39 = {instancePath:instancePath+"/moveName",schemaPath:"#/properties/moveName/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};if(vErrors === null){vErrors = [err39];}else {vErrors.push(err39);}errors++;validate21.errors = vErrors;return false;}else {errors = _errs52;if(vErrors !== null){if(_errs52){vErrors.length = _errs52;}else {vErrors = null;}}}var valid16 = _errs51 === errors;}else {var valid16 = true;}if(valid16){if(data.moveOrder !== undefined){var valid16 = false;validate21.errors = [{instancePath:instancePath+"/moveOrder",schemaPath:"#/properties/moveOrder/false schema",keyword:"false schema",params:{},message:"boolean schema is false"}];return false;}else {var valid16 = true;}}}}else {validate21.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate21.errors = vErrors;return errors === 0;}const schema29 = {"additionalProperties":{"anyOf":[{"$ref":"#/definitions/Modify<PropData>"},{"$ref":"#/definitions/Add<PropData>"},{"$ref":"#/definitions/Delete<PropData>"}]},"properties":{"moveName":false,"moveOrder":{"$ref":"#/definitions/Modify<MoveOrder[]>"}},"type":"object"};const schema30 = {"properties":{"new":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"items":{"$ref":"#/definitions/MoveOrder"},"type":"array"},{"type":["string","number"]}]},"old":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"items":{"$ref":"#/definitions/MoveOrder"},"type":"array"},{"type":["string","number"]}]},"type":{"enum":["modify"],"type":"string"}},"required":["new","old","type"],"type":"object"};const schema31 = {"properties":{"indent":{"type":"number"},"isCategory":{"enum":[true],"type":"boolean"},"name":{"type":"string"}},"required":["name"],"type":"object"};function validate24(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){let missing0;if((((data.new === undefined) && (missing0 = "new")) || ((data.old === undefined) && (missing0 = "old"))) || ((data.type === undefined) && (missing0 = "type"))){validate24.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];return false;}else {if(data.new !== undefined){let data0 = data.new;const _errs1 = errors;const _errs2 = errors;let valid1 = false;const _errs3 = errors;if(errors === _errs3){if(Array.isArray(data0)){var valid2 = true;const len0 = data0.length;for(let i0=0; i0<len0; i0++){const _errs5 = errors;if(typeof data0[i0] !== "string"){const err0 = {instancePath:instancePath+"/new/" + i0,schemaPath:"#/properties/new/anyOf/0/items/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err0];}else {vErrors.push(err0);}errors++;}var valid2 = _errs5 === errors;if(!valid2){break;}}}else {const err1 = {instancePath:instancePath+"/new",schemaPath:"#/properties/new/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};if(vErrors === null){vErrors = [err1];}else {vErrors.push(err1);}errors++;}}var _valid0 = _errs3 === errors;valid1 = valid1 || _valid0;if(!valid1){const _errs7 = errors;if(errors === _errs7){if(Array.isArray(data0)){var valid3 = true;const len1 = data0.length;for(let i1=0; i1<len1; i1++){let data2 = data0[i1];const _errs9 = errors;const _errs10 = errors;if(errors === _errs10){if(data2 && typeof data2 == "object" && !Array.isArray(data2)){let missing1;if((data2.name === undefined) && (missing1 = "name")){const err2 = {instancePath:instancePath+"/new/" + i1,schemaPath:"#/definitions/MoveOrder/required",keyword:"required",params:{missingProperty: missing1},message:"must have required property '"+missing1+"'"};if(vErrors === null){vErrors = [err2];}else {vErrors.push(err2);}errors++;}else {if(data2.indent !== undefined){let data3 = data2.indent;const _errs12 = errors;if(!((typeof data3 == "number") && (isFinite(data3)))){const err3 = {instancePath:instancePath+"/new/" + i1+"/indent",schemaPath:"#/definitions/MoveOrder/properties/indent/type",keyword:"type",params:{type: "number"},message:"must be number"};if(vErrors === null){vErrors = [err3];}else {vErrors.push(err3);}errors++;}var valid5 = _errs12 === errors;}else {var valid5 = true;}if(valid5){if(data2.isCategory !== undefined){let data4 = data2.isCategory;const _errs14 = errors;if(typeof data4 !== "boolean"){const err4 = {instancePath:instancePath+"/new/" + i1+"/isCategory",schemaPath:"#/definitions/MoveOrder/properties/isCategory/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};if(vErrors === null){vErrors = [err4];}else {vErrors.push(err4);}errors++;}if(!(data4 === true)){const err5 = {instancePath:instancePath+"/new/" + i1+"/isCategory",schemaPath:"#/definitions/MoveOrder/properties/isCategory/enum",keyword:"enum",params:{allowedValues: schema31.properties.isCategory.enum},message:"must be equal to one of the allowed values"};if(vErrors === null){vErrors = [err5];}else {vErrors.push(err5);}errors++;}var valid5 = _errs14 === errors;}else {var valid5 = true;}if(valid5){if(data2.name !== undefined){const _errs16 = errors;if(typeof data2.name !== "string"){const err6 = {instancePath:instancePath+"/new/" + i1+"/name",schemaPath:"#/definitions/MoveOrder/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err6];}else {vErrors.push(err6);}errors++;}var valid5 = _errs16 === errors;}else {var valid5 = true;}}}}}else {const err7 = {instancePath:instancePath+"/new/" + i1,schemaPath:"#/definitions/MoveOrder/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err7];}else {vErrors.push(err7);}errors++;}}var valid3 = _errs9 === errors;if(!valid3){break;}}}else {const err8 = {instancePath:instancePath+"/new",schemaPath:"#/properties/new/anyOf/1/type",keyword:"type",params:{type: "array"},message:"must be array"};if(vErrors === null){vErrors = [err8];}else {vErrors.push(err8);}errors++;}}var _valid0 = _errs7 === errors;valid1 = valid1 || _valid0;if(!valid1){const _errs18 = errors;if((typeof data0 !== "string") && (!((typeof data0 == "number") && (isFinite(data0))))){const err9 = {instancePath:instancePath+"/new",schemaPath:"#/properties/new/anyOf/2/type",keyword:"type",params:{type: schema30.properties.new.anyOf[2].type},message:"must be string,number"};if(vErrors === null){vErrors = [err9];}else {vErrors.push(err9);}errors++;}var _valid0 = _errs18 === errors;valid1 = valid1 || _valid0;}}if(!valid1){const err10 = {instancePath:instancePath+"/new",schemaPath:"#/properties/new/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};if(vErrors === null){vErrors = [err10];}else {vErrors.push(err10);}errors++;validate24.errors = vErrors;return false;}else {errors = _errs2;if(vErrors !== null){if(_errs2){vErrors.length = _errs2;}else {vErrors = null;}}}var valid0 = _errs1 === errors;}else {var valid0 = true;}if(valid0){if(data.old !== undefined){let data6 = data.old;const _errs20 = errors;const _errs21 = errors;let valid6 = false;const _errs22 = errors;if(errors === _errs22){if(Array.isArray(data6)){var valid7 = true;const len2 = data6.length;for(let i2=0; i2<len2; i2++){const _errs24 = errors;if(typeof data6[i2] !== "string"){const err11 = {instancePath:instancePath+"/old/" + i2,schemaPath:"#/properties/old/anyOf/0/items/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err11];}else {vErrors.push(err11);}errors++;}var valid7 = _errs24 === errors;if(!valid7){break;}}}else {const err12 = {instancePath:instancePath+"/old",schemaPath:"#/properties/old/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};if(vErrors === null){vErrors = [err12];}else {vErrors.push(err12);}errors++;}}var _valid1 = _errs22 === errors;valid6 = valid6 || _valid1;if(!valid6){const _errs26 = errors;if(errors === _errs26){if(Array.isArray(data6)){var valid8 = true;const len3 = data6.length;for(let i3=0; i3<len3; i3++){let data8 = data6[i3];const _errs28 = errors;const _errs29 = errors;if(errors === _errs29){if(data8 && typeof data8 == "object" && !Array.isArray(data8)){let missing2;if((data8.name === undefined) && (missing2 = "name")){const err13 = {instancePath:instancePath+"/old/" + i3,schemaPath:"#/definitions/MoveOrder/required",keyword:"required",params:{missingProperty: missing2},message:"must have required property '"+missing2+"'"};if(vErrors === null){vErrors = [err13];}else {vErrors.push(err13);}errors++;}else {if(data8.indent !== undefined){let data9 = data8.indent;const _errs31 = errors;if(!((typeof data9 == "number") && (isFinite(data9)))){const err14 = {instancePath:instancePath+"/old/" + i3+"/indent",schemaPath:"#/definitions/MoveOrder/properties/indent/type",keyword:"type",params:{type: "number"},message:"must be number"};if(vErrors === null){vErrors = [err14];}else {vErrors.push(err14);}errors++;}var valid10 = _errs31 === errors;}else {var valid10 = true;}if(valid10){if(data8.isCategory !== undefined){let data10 = data8.isCategory;const _errs33 = errors;if(typeof data10 !== "boolean"){const err15 = {instancePath:instancePath+"/old/" + i3+"/isCategory",schemaPath:"#/definitions/MoveOrder/properties/isCategory/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};if(vErrors === null){vErrors = [err15];}else {vErrors.push(err15);}errors++;}if(!(data10 === true)){const err16 = {instancePath:instancePath+"/old/" + i3+"/isCategory",schemaPath:"#/definitions/MoveOrder/properties/isCategory/enum",keyword:"enum",params:{allowedValues: schema31.properties.isCategory.enum},message:"must be equal to one of the allowed values"};if(vErrors === null){vErrors = [err16];}else {vErrors.push(err16);}errors++;}var valid10 = _errs33 === errors;}else {var valid10 = true;}if(valid10){if(data8.name !== undefined){const _errs35 = errors;if(typeof data8.name !== "string"){const err17 = {instancePath:instancePath+"/old/" + i3+"/name",schemaPath:"#/definitions/MoveOrder/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err17];}else {vErrors.push(err17);}errors++;}var valid10 = _errs35 === errors;}else {var valid10 = true;}}}}}else {const err18 = {instancePath:instancePath+"/old/" + i3,schemaPath:"#/definitions/MoveOrder/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err18];}else {vErrors.push(err18);}errors++;}}var valid8 = _errs28 === errors;if(!valid8){break;}}}else {const err19 = {instancePath:instancePath+"/old",schemaPath:"#/properties/old/anyOf/1/type",keyword:"type",params:{type: "array"},message:"must be array"};if(vErrors === null){vErrors = [err19];}else {vErrors.push(err19);}errors++;}}var _valid1 = _errs26 === errors;valid6 = valid6 || _valid1;if(!valid6){const _errs37 = errors;if((typeof data6 !== "string") && (!((typeof data6 == "number") && (isFinite(data6))))){const err20 = {instancePath:instancePath+"/old",schemaPath:"#/properties/old/anyOf/2/type",keyword:"type",params:{type: schema30.properties.old.anyOf[2].type},message:"must be string,number"};if(vErrors === null){vErrors = [err20];}else {vErrors.push(err20);}errors++;}var _valid1 = _errs37 === errors;valid6 = valid6 || _valid1;}}if(!valid6){const err21 = {instancePath:instancePath+"/old",schemaPath:"#/properties/old/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};if(vErrors === null){vErrors = [err21];}else {vErrors.push(err21);}errors++;validate24.errors = vErrors;return false;}else {errors = _errs21;if(vErrors !== null){if(_errs21){vErrors.length = _errs21;}else {vErrors = null;}}}var valid0 = _errs20 === errors;}else {var valid0 = true;}if(valid0){if(data.type !== undefined){let data12 = data.type;const _errs39 = errors;if(typeof data12 !== "string"){validate24.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}if(!(data12 === "modify")){validate24.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/enum",keyword:"enum",params:{allowedValues: schema30.properties.type.enum},message:"must be equal to one of the allowed values"}];return false;}var valid0 = _errs39 === errors;}else {var valid0 = true;}}}}}else {validate24.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate24.errors = vErrors;return errors === 0;}const schema33 = {"properties":{"new":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"items":{"$ref":"#/definitions/MoveOrder"},"type":"array"},{"type":["string","number"]}]},"type":{"enum":["add"],"type":"string"}},"required":["new","type"],"type":"object"};function validate26(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){let missing0;if(((data.new === undefined) && (missing0 = "new")) || ((data.type === undefined) && (missing0 = "type"))){validate26.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];return false;}else {if(data.new !== undefined){let data0 = data.new;const _errs1 = errors;const _errs2 = errors;let valid1 = false;const _errs3 = errors;if(errors === _errs3){if(Array.isArray(data0)){var valid2 = true;const len0 = data0.length;for(let i0=0; i0<len0; i0++){const _errs5 = errors;if(typeof data0[i0] !== "string"){const err0 = {instancePath:instancePath+"/new/" + i0,schemaPath:"#/properties/new/anyOf/0/items/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err0];}else {vErrors.push(err0);}errors++;}var valid2 = _errs5 === errors;if(!valid2){break;}}}else {const err1 = {instancePath:instancePath+"/new",schemaPath:"#/properties/new/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};if(vErrors === null){vErrors = [err1];}else {vErrors.push(err1);}errors++;}}var _valid0 = _errs3 === errors;valid1 = valid1 || _valid0;if(!valid1){const _errs7 = errors;if(errors === _errs7){if(Array.isArray(data0)){var valid3 = true;const len1 = data0.length;for(let i1=0; i1<len1; i1++){let data2 = data0[i1];const _errs9 = errors;const _errs10 = errors;if(errors === _errs10){if(data2 && typeof data2 == "object" && !Array.isArray(data2)){let missing1;if((data2.name === undefined) && (missing1 = "name")){const err2 = {instancePath:instancePath+"/new/" + i1,schemaPath:"#/definitions/MoveOrder/required",keyword:"required",params:{missingProperty: missing1},message:"must have required property '"+missing1+"'"};if(vErrors === null){vErrors = [err2];}else {vErrors.push(err2);}errors++;}else {if(data2.indent !== undefined){let data3 = data2.indent;const _errs12 = errors;if(!((typeof data3 == "number") && (isFinite(data3)))){const err3 = {instancePath:instancePath+"/new/" + i1+"/indent",schemaPath:"#/definitions/MoveOrder/properties/indent/type",keyword:"type",params:{type: "number"},message:"must be number"};if(vErrors === null){vErrors = [err3];}else {vErrors.push(err3);}errors++;}var valid5 = _errs12 === errors;}else {var valid5 = true;}if(valid5){if(data2.isCategory !== undefined){let data4 = data2.isCategory;const _errs14 = errors;if(typeof data4 !== "boolean"){const err4 = {instancePath:instancePath+"/new/" + i1+"/isCategory",schemaPath:"#/definitions/MoveOrder/properties/isCategory/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};if(vErrors === null){vErrors = [err4];}else {vErrors.push(err4);}errors++;}if(!(data4 === true)){const err5 = {instancePath:instancePath+"/new/" + i1+"/isCategory",schemaPath:"#/definitions/MoveOrder/properties/isCategory/enum",keyword:"enum",params:{allowedValues: schema31.properties.isCategory.enum},message:"must be equal to one of the allowed values"};if(vErrors === null){vErrors = [err5];}else {vErrors.push(err5);}errors++;}var valid5 = _errs14 === errors;}else {var valid5 = true;}if(valid5){if(data2.name !== undefined){const _errs16 = errors;if(typeof data2.name !== "string"){const err6 = {instancePath:instancePath+"/new/" + i1+"/name",schemaPath:"#/definitions/MoveOrder/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err6];}else {vErrors.push(err6);}errors++;}var valid5 = _errs16 === errors;}else {var valid5 = true;}}}}}else {const err7 = {instancePath:instancePath+"/new/" + i1,schemaPath:"#/definitions/MoveOrder/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err7];}else {vErrors.push(err7);}errors++;}}var valid3 = _errs9 === errors;if(!valid3){break;}}}else {const err8 = {instancePath:instancePath+"/new",schemaPath:"#/properties/new/anyOf/1/type",keyword:"type",params:{type: "array"},message:"must be array"};if(vErrors === null){vErrors = [err8];}else {vErrors.push(err8);}errors++;}}var _valid0 = _errs7 === errors;valid1 = valid1 || _valid0;if(!valid1){const _errs18 = errors;if((typeof data0 !== "string") && (!((typeof data0 == "number") && (isFinite(data0))))){const err9 = {instancePath:instancePath+"/new",schemaPath:"#/properties/new/anyOf/2/type",keyword:"type",params:{type: schema33.properties.new.anyOf[2].type},message:"must be string,number"};if(vErrors === null){vErrors = [err9];}else {vErrors.push(err9);}errors++;}var _valid0 = _errs18 === errors;valid1 = valid1 || _valid0;}}if(!valid1){const err10 = {instancePath:instancePath+"/new",schemaPath:"#/properties/new/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};if(vErrors === null){vErrors = [err10];}else {vErrors.push(err10);}errors++;validate26.errors = vErrors;return false;}else {errors = _errs2;if(vErrors !== null){if(_errs2){vErrors.length = _errs2;}else {vErrors = null;}}}var valid0 = _errs1 === errors;}else {var valid0 = true;}if(valid0){if(data.type !== undefined){let data6 = data.type;const _errs20 = errors;if(typeof data6 !== "string"){validate26.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}if(!(data6 === "add")){validate26.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/enum",keyword:"enum",params:{allowedValues: schema33.properties.type.enum},message:"must be equal to one of the allowed values"}];return false;}var valid0 = _errs20 === errors;}else {var valid0 = true;}}}}else {validate26.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate26.errors = vErrors;return errors === 0;}const schema35 = {"properties":{"old":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"items":{"$ref":"#/definitions/MoveOrder"},"type":"array"},{"type":["string","number"]}]},"type":{"enum":["delete"],"type":"string"}},"required":["old","type"],"type":"object"};function validate28(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){let missing0;if(((data.old === undefined) && (missing0 = "old")) || ((data.type === undefined) && (missing0 = "type"))){validate28.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];return false;}else {if(data.old !== undefined){let data0 = data.old;const _errs1 = errors;const _errs2 = errors;let valid1 = false;const _errs3 = errors;if(errors === _errs3){if(Array.isArray(data0)){var valid2 = true;const len0 = data0.length;for(let i0=0; i0<len0; i0++){const _errs5 = errors;if(typeof data0[i0] !== "string"){const err0 = {instancePath:instancePath+"/old/" + i0,schemaPath:"#/properties/old/anyOf/0/items/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err0];}else {vErrors.push(err0);}errors++;}var valid2 = _errs5 === errors;if(!valid2){break;}}}else {const err1 = {instancePath:instancePath+"/old",schemaPath:"#/properties/old/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};if(vErrors === null){vErrors = [err1];}else {vErrors.push(err1);}errors++;}}var _valid0 = _errs3 === errors;valid1 = valid1 || _valid0;if(!valid1){const _errs7 = errors;if(errors === _errs7){if(Array.isArray(data0)){var valid3 = true;const len1 = data0.length;for(let i1=0; i1<len1; i1++){let data2 = data0[i1];const _errs9 = errors;const _errs10 = errors;if(errors === _errs10){if(data2 && typeof data2 == "object" && !Array.isArray(data2)){let missing1;if((data2.name === undefined) && (missing1 = "name")){const err2 = {instancePath:instancePath+"/old/" + i1,schemaPath:"#/definitions/MoveOrder/required",keyword:"required",params:{missingProperty: missing1},message:"must have required property '"+missing1+"'"};if(vErrors === null){vErrors = [err2];}else {vErrors.push(err2);}errors++;}else {if(data2.indent !== undefined){let data3 = data2.indent;const _errs12 = errors;if(!((typeof data3 == "number") && (isFinite(data3)))){const err3 = {instancePath:instancePath+"/old/" + i1+"/indent",schemaPath:"#/definitions/MoveOrder/properties/indent/type",keyword:"type",params:{type: "number"},message:"must be number"};if(vErrors === null){vErrors = [err3];}else {vErrors.push(err3);}errors++;}var valid5 = _errs12 === errors;}else {var valid5 = true;}if(valid5){if(data2.isCategory !== undefined){let data4 = data2.isCategory;const _errs14 = errors;if(typeof data4 !== "boolean"){const err4 = {instancePath:instancePath+"/old/" + i1+"/isCategory",schemaPath:"#/definitions/MoveOrder/properties/isCategory/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};if(vErrors === null){vErrors = [err4];}else {vErrors.push(err4);}errors++;}if(!(data4 === true)){const err5 = {instancePath:instancePath+"/old/" + i1+"/isCategory",schemaPath:"#/definitions/MoveOrder/properties/isCategory/enum",keyword:"enum",params:{allowedValues: schema31.properties.isCategory.enum},message:"must be equal to one of the allowed values"};if(vErrors === null){vErrors = [err5];}else {vErrors.push(err5);}errors++;}var valid5 = _errs14 === errors;}else {var valid5 = true;}if(valid5){if(data2.name !== undefined){const _errs16 = errors;if(typeof data2.name !== "string"){const err6 = {instancePath:instancePath+"/old/" + i1+"/name",schemaPath:"#/definitions/MoveOrder/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err6];}else {vErrors.push(err6);}errors++;}var valid5 = _errs16 === errors;}else {var valid5 = true;}}}}}else {const err7 = {instancePath:instancePath+"/old/" + i1,schemaPath:"#/definitions/MoveOrder/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err7];}else {vErrors.push(err7);}errors++;}}var valid3 = _errs9 === errors;if(!valid3){break;}}}else {const err8 = {instancePath:instancePath+"/old",schemaPath:"#/properties/old/anyOf/1/type",keyword:"type",params:{type: "array"},message:"must be array"};if(vErrors === null){vErrors = [err8];}else {vErrors.push(err8);}errors++;}}var _valid0 = _errs7 === errors;valid1 = valid1 || _valid0;if(!valid1){const _errs18 = errors;if((typeof data0 !== "string") && (!((typeof data0 == "number") && (isFinite(data0))))){const err9 = {instancePath:instancePath+"/old",schemaPath:"#/properties/old/anyOf/2/type",keyword:"type",params:{type: schema35.properties.old.anyOf[2].type},message:"must be string,number"};if(vErrors === null){vErrors = [err9];}else {vErrors.push(err9);}errors++;}var _valid0 = _errs18 === errors;valid1 = valid1 || _valid0;}}if(!valid1){const err10 = {instancePath:instancePath+"/old",schemaPath:"#/properties/old/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};if(vErrors === null){vErrors = [err10];}else {vErrors.push(err10);}errors++;validate28.errors = vErrors;return false;}else {errors = _errs2;if(vErrors !== null){if(_errs2){vErrors.length = _errs2;}else {vErrors = null;}}}var valid0 = _errs1 === errors;}else {var valid0 = true;}if(valid0){if(data.type !== undefined){let data6 = data.type;const _errs20 = errors;if(typeof data6 !== "string"){validate28.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}if(!(data6 === "delete")){validate28.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/enum",keyword:"enum",params:{allowedValues: schema35.properties.type.enum},message:"must be equal to one of the allowed values"}];return false;}var valid0 = _errs20 === errors;}else {var valid0 = true;}}}}else {validate28.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate28.errors = vErrors;return errors === 0;}const schema37 = {"properties":{"new":{"items":{"$ref":"#/definitions/MoveOrder"},"type":"array"},"old":{"items":{"$ref":"#/definitions/MoveOrder"},"type":"array"},"type":{"enum":["modify"],"type":"string"}},"required":["new","old","type"],"type":"object"};function validate30(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){let missing0;if((((data.new === undefined) && (missing0 = "new")) || ((data.old === undefined) && (missing0 = "old"))) || ((data.type === undefined) && (missing0 = "type"))){validate30.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];return false;}else {if(data.new !== undefined){let data0 = data.new;const _errs1 = errors;if(errors === _errs1){if(Array.isArray(data0)){var valid1 = true;const len0 = data0.length;for(let i0=0; i0<len0; i0++){let data1 = data0[i0];const _errs3 = errors;const _errs4 = errors;if(errors === _errs4){if(data1 && typeof data1 == "object" && !Array.isArray(data1)){let missing1;if((data1.name === undefined) && (missing1 = "name")){validate30.errors = [{instancePath:instancePath+"/new/" + i0,schemaPath:"#/definitions/MoveOrder/required",keyword:"required",params:{missingProperty: missing1},message:"must have required property '"+missing1+"'"}];return false;}else {if(data1.indent !== undefined){let data2 = data1.indent;const _errs6 = errors;if(!((typeof data2 == "number") && (isFinite(data2)))){validate30.errors = [{instancePath:instancePath+"/new/" + i0+"/indent",schemaPath:"#/definitions/MoveOrder/properties/indent/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid3 = _errs6 === errors;}else {var valid3 = true;}if(valid3){if(data1.isCategory !== undefined){let data3 = data1.isCategory;const _errs8 = errors;if(typeof data3 !== "boolean"){validate30.errors = [{instancePath:instancePath+"/new/" + i0+"/isCategory",schemaPath:"#/definitions/MoveOrder/properties/isCategory/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];return false;}if(!(data3 === true)){validate30.errors = [{instancePath:instancePath+"/new/" + i0+"/isCategory",schemaPath:"#/definitions/MoveOrder/properties/isCategory/enum",keyword:"enum",params:{allowedValues: schema31.properties.isCategory.enum},message:"must be equal to one of the allowed values"}];return false;}var valid3 = _errs8 === errors;}else {var valid3 = true;}if(valid3){if(data1.name !== undefined){const _errs10 = errors;if(typeof data1.name !== "string"){validate30.errors = [{instancePath:instancePath+"/new/" + i0+"/name",schemaPath:"#/definitions/MoveOrder/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid3 = _errs10 === errors;}else {var valid3 = true;}}}}}else {validate30.errors = [{instancePath:instancePath+"/new/" + i0,schemaPath:"#/definitions/MoveOrder/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid1 = _errs3 === errors;if(!valid1){break;}}}else {validate30.errors = [{instancePath:instancePath+"/new",schemaPath:"#/properties/new/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs1 === errors;}else {var valid0 = true;}if(valid0){if(data.old !== undefined){let data5 = data.old;const _errs12 = errors;if(errors === _errs12){if(Array.isArray(data5)){var valid4 = true;const len1 = data5.length;for(let i1=0; i1<len1; i1++){let data6 = data5[i1];const _errs14 = errors;const _errs15 = errors;if(errors === _errs15){if(data6 && typeof data6 == "object" && !Array.isArray(data6)){let missing2;if((data6.name === undefined) && (missing2 = "name")){validate30.errors = [{instancePath:instancePath+"/old/" + i1,schemaPath:"#/definitions/MoveOrder/required",keyword:"required",params:{missingProperty: missing2},message:"must have required property '"+missing2+"'"}];return false;}else {if(data6.indent !== undefined){let data7 = data6.indent;const _errs17 = errors;if(!((typeof data7 == "number") && (isFinite(data7)))){validate30.errors = [{instancePath:instancePath+"/old/" + i1+"/indent",schemaPath:"#/definitions/MoveOrder/properties/indent/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid6 = _errs17 === errors;}else {var valid6 = true;}if(valid6){if(data6.isCategory !== undefined){let data8 = data6.isCategory;const _errs19 = errors;if(typeof data8 !== "boolean"){validate30.errors = [{instancePath:instancePath+"/old/" + i1+"/isCategory",schemaPath:"#/definitions/MoveOrder/properties/isCategory/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];return false;}if(!(data8 === true)){validate30.errors = [{instancePath:instancePath+"/old/" + i1+"/isCategory",schemaPath:"#/definitions/MoveOrder/properties/isCategory/enum",keyword:"enum",params:{allowedValues: schema31.properties.isCategory.enum},message:"must be equal to one of the allowed values"}];return false;}var valid6 = _errs19 === errors;}else {var valid6 = true;}if(valid6){if(data6.name !== undefined){const _errs21 = errors;if(typeof data6.name !== "string"){validate30.errors = [{instancePath:instancePath+"/old/" + i1+"/name",schemaPath:"#/definitions/MoveOrder/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid6 = _errs21 === errors;}else {var valid6 = true;}}}}}else {validate30.errors = [{instancePath:instancePath+"/old/" + i1,schemaPath:"#/definitions/MoveOrder/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid4 = _errs14 === errors;if(!valid4){break;}}}else {validate30.errors = [{instancePath:instancePath+"/old",schemaPath:"#/properties/old/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs12 === errors;}else {var valid0 = true;}if(valid0){if(data.type !== undefined){let data10 = data.type;const _errs23 = errors;if(typeof data10 !== "string"){validate30.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}if(!(data10 === "modify")){validate30.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/enum",keyword:"enum",params:{allowedValues: schema37.properties.type.enum},message:"must be equal to one of the allowed values"}];return false;}var valid0 = _errs23 === errors;}else {var valid0 = true;}}}}}else {validate30.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate30.errors = vErrors;return errors === 0;}function validate23(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){const _errs1 = errors;for(const key0 in data){if(!((key0 === "moveName") || (key0 === "moveOrder"))){let data0 = data[key0];const _errs2 = errors;const _errs3 = errors;let valid1 = false;const _errs4 = errors;if(!(validate24(data0, {instancePath:instancePath+"/" + key0.replace(/~/g, "~0").replace(/\//g, "~1"),parentData:data,parentDataProperty:key0,rootData}))){vErrors = vErrors === null ? validate24.errors : vErrors.concat(validate24.errors);errors = vErrors.length;}var _valid0 = _errs4 === errors;valid1 = valid1 || _valid0;if(!valid1){const _errs5 = errors;if(!(validate26(data0, {instancePath:instancePath+"/" + key0.replace(/~/g, "~0").replace(/\//g, "~1"),parentData:data,parentDataProperty:key0,rootData}))){vErrors = vErrors === null ? validate26.errors : vErrors.concat(validate26.errors);errors = vErrors.length;}var _valid0 = _errs5 === errors;valid1 = valid1 || _valid0;if(!valid1){const _errs6 = errors;if(!(validate28(data0, {instancePath:instancePath+"/" + key0.replace(/~/g, "~0").replace(/\//g, "~1"),parentData:data,parentDataProperty:key0,rootData}))){vErrors = vErrors === null ? validate28.errors : vErrors.concat(validate28.errors);errors = vErrors.length;}var _valid0 = _errs6 === errors;valid1 = valid1 || _valid0;}}if(!valid1){const err0 = {instancePath:instancePath+"/" + key0.replace(/~/g, "~0").replace(/\//g, "~1"),schemaPath:"#/additionalProperties/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};if(vErrors === null){vErrors = [err0];}else {vErrors.push(err0);}errors++;validate23.errors = vErrors;return false;}else {errors = _errs3;if(vErrors !== null){if(_errs3){vErrors.length = _errs3;}else {vErrors = null;}}}var valid0 = _errs2 === errors;if(!valid0){break;}}}if(_errs1 === errors){if(data.moveName !== undefined){var valid2 = false;validate23.errors = [{instancePath:instancePath+"/moveName",schemaPath:"#/properties/moveName/false schema",keyword:"false schema",params:{},message:"boolean schema is false"}];return false;}else {var valid2 = true;}if(valid2){if(data.moveOrder !== undefined){const _errs7 = errors;if(!(validate30(data.moveOrder, {instancePath:instancePath+"/moveOrder",parentData:data,parentDataProperty:"moveOrder",rootData}))){vErrors = vErrors === null ? validate30.errors : vErrors.concat(validate30.errors);errors = vErrors.length;}var valid2 = _errs7 === errors;}else {var valid2 = true;}}}}else {validate23.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate23.errors = vErrors;return errors === 0;}function validate20(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){let missing0;if(((((data.baseRevision === undefined) && (missing0 = "baseRevision")) || ((data.createdAt === undefined) && (missing0 = "createdAt"))) || ((data.createdBy === undefined) && (missing0 = "createdBy"))) || ((data.updateTitle === undefined) && (missing0 = "updateTitle"))){validate20.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];return false;}else {if(data.baseRevision !== undefined){const _errs1 = errors;if(typeof data.baseRevision !== "string"){validate20.errors = [{instancePath:instancePath+"/baseRevision",schemaPath:"#/properties/baseRevision/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs1 === errors;}else {var valid0 = true;}if(valid0){if(data.createdAt !== undefined){const _errs3 = errors;if(typeof data.createdAt !== "string"){validate20.errors = [{instancePath:instancePath+"/createdAt",schemaPath:"#/properties/createdAt/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs3 === errors;}else {var valid0 = true;}if(valid0){if(data.createdBy !== undefined){const _errs5 = errors;if(typeof data.createdBy !== "string"){validate20.errors = [{instancePath:instancePath+"/createdBy",schemaPath:"#/properties/createdBy/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs5 === errors;}else {var valid0 = true;}if(valid0){if(data.moveChanges !== undefined){let data3 = data.moveChanges;const _errs7 = errors;if(errors === _errs7){if(data3 && typeof data3 == "object" && !Array.isArray(data3)){for(const key0 in data3){const _errs10 = errors;if(!(validate21(data3[key0], {instancePath:instancePath+"/moveChanges/" + key0.replace(/~/g, "~0").replace(/\//g, "~1"),parentData:data3,parentDataProperty:key0,rootData}))){vErrors = vErrors === null ? validate21.errors : vErrors.concat(validate21.errors);errors = vErrors.length;}var valid1 = _errs10 === errors;if(!valid1){break;}}}else {validate20.errors = [{instancePath:instancePath+"/moveChanges",schemaPath:"#/properties/moveChanges/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid0 = _errs7 === errors;}else {var valid0 = true;}if(valid0){if(data.previousChange !== undefined){const _errs11 = errors;if(typeof data.previousChange !== "string"){validate20.errors = [{instancePath:instancePath+"/previousChange",schemaPath:"#/properties/previousChange/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs11 === errors;}else {var valid0 = true;}if(valid0){if(data.universalPropChanges !== undefined){const _errs13 = errors;if(!(validate23(data.universalPropChanges, {instancePath:instancePath+"/universalPropChanges",parentData:data,parentDataProperty:"universalPropChanges",rootData}))){vErrors = vErrors === null ? validate23.errors : vErrors.concat(validate23.errors);errors = vErrors.length;}var valid0 = _errs13 === errors;}else {var valid0 = true;}if(valid0){if(data.updateDescription !== undefined){const _errs14 = errors;if(typeof data.updateDescription !== "string"){validate20.errors = [{instancePath:instancePath+"/updateDescription",schemaPath:"#/properties/updateDescription/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs14 === errors;}else {var valid0 = true;}if(valid0){if(data.updateTitle !== undefined){const _errs16 = errors;if(typeof data.updateTitle !== "string"){validate20.errors = [{instancePath:instancePath+"/updateTitle",schemaPath:"#/properties/updateTitle/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs16 === errors;}else {var valid0 = true;}if(valid0){if(data.updateVersion !== undefined){const _errs18 = errors;if(typeof data.updateVersion !== "string"){validate20.errors = [{instancePath:instancePath+"/updateVersion",schemaPath:"#/properties/updateVersion/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs18 === errors;}else {var valid0 = true;}}}}}}}}}}}else {validate20.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate20.errors = vErrors;return errors === 0;}