"use strict";module.exports = validate20;module.exports.default = validate20;const schema22 = {"$schema":"http://json-schema.org/draft-07/schema#","definitions":{"MoveCols":{"type":"object"},"MoveOrder":{"properties":{"indent":{"type":"number"},"isCategory":{"enum":[true],"type":"boolean"},"name":{"type":"string"}},"required":["name"],"type":"object"},"PropCols":{"properties":{"moveOrder":{"items":{"$ref":"#/definitions/MoveOrder"},"type":"array"}},"required":["moveOrder"],"type":"object"}},"properties":{"changeHistory":{"items":{"type":"string"},"type":"array"},"charName":{"type":"string"},"displayName":{"type":"string"},"moves":{"additionalProperties":{"$ref":"#/definitions/MoveCols"},"type":"object"},"universalProps":{"$ref":"#/definitions/PropCols"},"updatedAt":{"type":"string"},"updatedBy":{"type":"string"}},"required":["changeHistory","charName","displayName","moves","universalProps","updatedAt","updatedBy"],"type":"object"};const schema23 = {"type":"object"};const schema24 = {"properties":{"moveOrder":{"items":{"$ref":"#/definitions/MoveOrder"},"type":"array"}},"required":["moveOrder"],"type":"object"};const schema25 = {"properties":{"indent":{"type":"number"},"isCategory":{"enum":[true],"type":"boolean"},"name":{"type":"string"}},"required":["name"],"type":"object"};function validate21(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){let missing0;if((data.moveOrder === undefined) && (missing0 = "moveOrder")){validate21.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];return false;}else {if(data.moveOrder !== undefined){let data0 = data.moveOrder;const _errs1 = errors;if(errors === _errs1){if(Array.isArray(data0)){var valid1 = true;const len0 = data0.length;for(let i0=0; i0<len0; i0++){let data1 = data0[i0];const _errs3 = errors;const _errs4 = errors;if(errors === _errs4){if(data1 && typeof data1 == "object" && !Array.isArray(data1)){let missing1;if((data1.name === undefined) && (missing1 = "name")){validate21.errors = [{instancePath:instancePath+"/moveOrder/" + i0,schemaPath:"#/definitions/MoveOrder/required",keyword:"required",params:{missingProperty: missing1},message:"must have required property '"+missing1+"'"}];return false;}else {if(data1.indent !== undefined){let data2 = data1.indent;const _errs6 = errors;if(!((typeof data2 == "number") && (isFinite(data2)))){validate21.errors = [{instancePath:instancePath+"/moveOrder/" + i0+"/indent",schemaPath:"#/definitions/MoveOrder/properties/indent/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid3 = _errs6 === errors;}else {var valid3 = true;}if(valid3){if(data1.isCategory !== undefined){let data3 = data1.isCategory;const _errs8 = errors;if(typeof data3 !== "boolean"){validate21.errors = [{instancePath:instancePath+"/moveOrder/" + i0+"/isCategory",schemaPath:"#/definitions/MoveOrder/properties/isCategory/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];return false;}if(!(data3 === true)){validate21.errors = [{instancePath:instancePath+"/moveOrder/" + i0+"/isCategory",schemaPath:"#/definitions/MoveOrder/properties/isCategory/enum",keyword:"enum",params:{allowedValues: schema25.properties.isCategory.enum},message:"must be equal to one of the allowed values"}];return false;}var valid3 = _errs8 === errors;}else {var valid3 = true;}if(valid3){if(data1.name !== undefined){const _errs10 = errors;if(typeof data1.name !== "string"){validate21.errors = [{instancePath:instancePath+"/moveOrder/" + i0+"/name",schemaPath:"#/definitions/MoveOrder/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid3 = _errs10 === errors;}else {var valid3 = true;}}}}}else {validate21.errors = [{instancePath:instancePath+"/moveOrder/" + i0,schemaPath:"#/definitions/MoveOrder/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid1 = _errs3 === errors;if(!valid1){break;}}}else {validate21.errors = [{instancePath:instancePath+"/moveOrder",schemaPath:"#/properties/moveOrder/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}}}}else {validate21.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate21.errors = vErrors;return errors === 0;}function validate20(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){let missing0;if((((((((data.changeHistory === undefined) && (missing0 = "changeHistory")) || ((data.charName === undefined) && (missing0 = "charName"))) || ((data.displayName === undefined) && (missing0 = "displayName"))) || ((data.moves === undefined) && (missing0 = "moves"))) || ((data.universalProps === undefined) && (missing0 = "universalProps"))) || ((data.updatedAt === undefined) && (missing0 = "updatedAt"))) || ((data.updatedBy === undefined) && (missing0 = "updatedBy"))){validate20.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];return false;}else {if(data.changeHistory !== undefined){let data0 = data.changeHistory;const _errs1 = errors;if(errors === _errs1){if(Array.isArray(data0)){var valid1 = true;const len0 = data0.length;for(let i0=0; i0<len0; i0++){const _errs3 = errors;if(typeof data0[i0] !== "string"){validate20.errors = [{instancePath:instancePath+"/changeHistory/" + i0,schemaPath:"#/properties/changeHistory/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid1 = _errs3 === errors;if(!valid1){break;}}}else {validate20.errors = [{instancePath:instancePath+"/changeHistory",schemaPath:"#/properties/changeHistory/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs1 === errors;}else {var valid0 = true;}if(valid0){if(data.charName !== undefined){const _errs5 = errors;if(typeof data.charName !== "string"){validate20.errors = [{instancePath:instancePath+"/charName",schemaPath:"#/properties/charName/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs5 === errors;}else {var valid0 = true;}if(valid0){if(data.displayName !== undefined){const _errs7 = errors;if(typeof data.displayName !== "string"){validate20.errors = [{instancePath:instancePath+"/displayName",schemaPath:"#/properties/displayName/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs7 === errors;}else {var valid0 = true;}if(valid0){if(data.moves !== undefined){let data4 = data.moves;const _errs9 = errors;if(errors === _errs9){if(data4 && typeof data4 == "object" && !Array.isArray(data4)){for(const key0 in data4){let data5 = data4[key0];const _errs12 = errors;if(!(data5 && typeof data5 == "object" && !Array.isArray(data5))){validate20.errors = [{instancePath:instancePath+"/moves/" + key0.replace(/~/g, "~0").replace(/\//g, "~1"),schemaPath:"#/definitions/MoveCols/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}var valid2 = _errs12 === errors;if(!valid2){break;}}}else {validate20.errors = [{instancePath:instancePath+"/moves",schemaPath:"#/properties/moves/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid0 = _errs9 === errors;}else {var valid0 = true;}if(valid0){if(data.universalProps !== undefined){const _errs15 = errors;if(!(validate21(data.universalProps, {instancePath:instancePath+"/universalProps",parentData:data,parentDataProperty:"universalProps",rootData}))){vErrors = vErrors === null ? validate21.errors : vErrors.concat(validate21.errors);errors = vErrors.length;}var valid0 = _errs15 === errors;}else {var valid0 = true;}if(valid0){if(data.updatedAt !== undefined){const _errs16 = errors;if(typeof data.updatedAt !== "string"){validate20.errors = [{instancePath:instancePath+"/updatedAt",schemaPath:"#/properties/updatedAt/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs16 === errors;}else {var valid0 = true;}if(valid0){if(data.updatedBy !== undefined){const _errs18 = errors;if(typeof data.updatedBy !== "string"){validate20.errors = [{instancePath:instancePath+"/updatedBy",schemaPath:"#/properties/updatedBy/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs18 === errors;}else {var valid0 = true;}}}}}}}}}else {validate20.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate20.errors = vErrors;return errors === 0;}