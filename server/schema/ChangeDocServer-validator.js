"use strict";module.exports = validate20;module.exports.default = validate20;const schema22 = {"$schema":"http://json-schema.org/draft-07/schema#","additionalProperties":false,"definitions":{"Add<MoveData>":{"additionalProperties":false,"properties":{"new":{"$ref":"#/definitions/MoveData"},"type":{"enum":["add"],"type":"string"}},"required":["new","type"],"type":"object"},"Add<PropData>":{"additionalProperties":false,"properties":{"new":{"$ref":"#/definitions/PropData"},"type":{"enum":["add"],"type":"string"}},"required":["new","type"],"type":"object"},"Add<string>":{"additionalProperties":false,"properties":{"new":{"type":"string"},"type":{"enum":["add"],"type":"string"}},"required":["new","type"],"type":"object"},"Delete<MoveData>":{"additionalProperties":false,"properties":{"old":{"$ref":"#/definitions/MoveData"},"type":{"enum":["delete"],"type":"string"}},"required":["old","type"],"type":"object"},"Delete<PropData>":{"additionalProperties":false,"properties":{"old":{"$ref":"#/definitions/PropData"},"type":{"enum":["delete"],"type":"string"}},"required":["old","type"],"type":"object"},"Delete<string>":{"additionalProperties":false,"properties":{"old":{"type":"string"},"type":{"enum":["delete"],"type":"string"}},"required":["old","type"],"type":"object"},"Modify<MoveData>":{"additionalProperties":false,"properties":{"new":{"$ref":"#/definitions/MoveData"},"old":{"$ref":"#/definitions/MoveData"},"type":{"enum":["modify"],"type":"string"}},"required":["new","old","type"],"type":"object"},"Modify<MoveOrder[]>":{"additionalProperties":false,"properties":{"new":{"items":{"$ref":"#/definitions/MoveOrder"},"type":"array"},"old":{"items":{"$ref":"#/definitions/MoveOrder"},"type":"array"},"type":{"enum":["modify"],"type":"string"}},"required":["new","old","type"],"type":"object"},"Modify<PropData>":{"additionalProperties":false,"properties":{"new":{"$ref":"#/definitions/PropData"},"old":{"$ref":"#/definitions/PropData"},"type":{"enum":["modify"],"type":"string"}},"required":["new","old","type"],"type":"object"},"MoveChanges":{"additionalProperties":{"anyOf":[{"$ref":"#/definitions/Modify<MoveData>"},{"$ref":"#/definitions/Add<MoveData>"},{"$ref":"#/definitions/Delete<MoveData>"}]},"properties":{"moveName":{"anyOf":[{"$ref":"#/definitions/Add<string>"},{"$ref":"#/definitions/Delete<string>"}]},"moveOrder":false},"type":"object"},"MoveData":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"type":["string","number"]}]},"MoveOrder":{"additionalProperties":false,"properties":{"indent":{"type":"number"},"isCategory":{"enum":[true],"type":"boolean"},"name":{"type":"string"}},"required":["name"],"type":"object"},"PropChanges":{"additionalProperties":{"anyOf":[{"$ref":"#/definitions/Modify<PropData>"},{"$ref":"#/definitions/Add<PropData>"},{"$ref":"#/definitions/Delete<PropData>"}]},"properties":{"moveName":false,"moveOrder":{"$ref":"#/definitions/Modify<MoveOrder[]>"}},"type":"object"},"PropData":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"items":{"$ref":"#/definitions/MoveOrder"},"type":"array"},{"type":["string","number"]}]}},"properties":{"baseRevision":{"type":"string"},"createdAt":{"type":"string"},"createdBy":{"type":"string"},"moveChanges":{"additionalProperties":{"$ref":"#/definitions/MoveChanges"},"type":"object"},"previousChange":{"type":"string"},"universalPropChanges":{"$ref":"#/definitions/PropChanges"},"updateDescription":{"description":"users give more details, say who they are","maxLength":250,"type":"string"},"updateTitle":{"description":"url-safe user slug","pattern":"^[\\w\\-.~]{3,25}$","type":"string"},"updateVersion":{"description":"game version. Can't enforce accuracy.","pattern":"^[\\d.]{1,10}$","type":"string"}},"required":["baseRevision","createdAt","createdBy","updateTitle"],"type":"object"};const func4 = Object.prototype.hasOwnProperty;const func5 = require("ajv/dist/runtime/ucs2length").default;const schema23 = {"additionalProperties":{"anyOf":[{"$ref":"#/definitions/Modify<MoveData>"},{"$ref":"#/definitions/Add<MoveData>"},{"$ref":"#/definitions/Delete<MoveData>"}]},"properties":{"moveName":{"anyOf":[{"$ref":"#/definitions/Add<string>"},{"$ref":"#/definitions/Delete<string>"}]},"moveOrder":false},"type":"object"};const schema31 = {"additionalProperties":false,"properties":{"new":{"type":"string"},"type":{"enum":["add"],"type":"string"}},"required":["new","type"],"type":"object"};const schema32 = {"additionalProperties":false,"properties":{"old":{"type":"string"},"type":{"enum":["delete"],"type":"string"}},"required":["old","type"],"type":"object"};const schema24 = {"additionalProperties":false,"properties":{"new":{"$ref":"#/definitions/MoveData"},"old":{"$ref":"#/definitions/MoveData"},"type":{"enum":["modify"],"type":"string"}},"required":["new","old","type"],"type":"object"};const schema25 = {"anyOf":[{"items":{"type":"string"},"type":"array"},{"type":["string","number"]}]};function validate22(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(data && typeof data == "object" && !Array.isArray(data)){if(data.new === undefined){const err0 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "new"},message:"must have required property '"+"new"+"'"};if(vErrors === null){vErrors = [err0];}else {vErrors.push(err0);}errors++;}if(data.old === undefined){const err1 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "old"},message:"must have required property '"+"old"+"'"};if(vErrors === null){vErrors = [err1];}else {vErrors.push(err1);}errors++;}if(data.type === undefined){const err2 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "type"},message:"must have required property '"+"type"+"'"};if(vErrors === null){vErrors = [err2];}else {vErrors.push(err2);}errors++;}for(const key0 in data){if(!(((key0 === "new") || (key0 === "old")) || (key0 === "type"))){delete data[key0];}}if(data.new !== undefined){let data0 = data.new;const _errs4 = errors;let valid2 = false;const _errs5 = errors;if(Array.isArray(data0)){const len0 = data0.length;for(let i0=0; i0<len0; i0++){if(typeof data0[i0] !== "string"){const err3 = {instancePath:instancePath+"/new/" + i0,schemaPath:"#/definitions/MoveData/anyOf/0/items/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err3];}else {vErrors.push(err3);}errors++;}}}else {const err4 = {instancePath:instancePath+"/new",schemaPath:"#/definitions/MoveData/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};if(vErrors === null){vErrors = [err4];}else {vErrors.push(err4);}errors++;}var _valid0 = _errs5 === errors;valid2 = valid2 || _valid0;if(!valid2){const _errs9 = errors;if((typeof data0 !== "string") && (!((typeof data0 == "number") && (isFinite(data0))))){const err5 = {instancePath:instancePath+"/new",schemaPath:"#/definitions/MoveData/anyOf/1/type",keyword:"type",params:{type: schema25.anyOf[1].type},message:"must be string,number"};if(vErrors === null){vErrors = [err5];}else {vErrors.push(err5);}errors++;}var _valid0 = _errs9 === errors;valid2 = valid2 || _valid0;}if(!valid2){const err6 = {instancePath:instancePath+"/new",schemaPath:"#/definitions/MoveData/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};if(vErrors === null){vErrors = [err6];}else {vErrors.push(err6);}errors++;}else {errors = _errs4;if(vErrors !== null){if(_errs4){vErrors.length = _errs4;}else {vErrors = null;}}}}if(data.old !== undefined){let data2 = data.old;const _errs13 = errors;let valid6 = false;const _errs14 = errors;if(Array.isArray(data2)){const len1 = data2.length;for(let i1=0; i1<len1; i1++){if(typeof data2[i1] !== "string"){const err7 = {instancePath:instancePath+"/old/" + i1,schemaPath:"#/definitions/MoveData/anyOf/0/items/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err7];}else {vErrors.push(err7);}errors++;}}}else {const err8 = {instancePath:instancePath+"/old",schemaPath:"#/definitions/MoveData/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};if(vErrors === null){vErrors = [err8];}else {vErrors.push(err8);}errors++;}var _valid1 = _errs14 === errors;valid6 = valid6 || _valid1;if(!valid6){const _errs18 = errors;if((typeof data2 !== "string") && (!((typeof data2 == "number") && (isFinite(data2))))){const err9 = {instancePath:instancePath+"/old",schemaPath:"#/definitions/MoveData/anyOf/1/type",keyword:"type",params:{type: schema25.anyOf[1].type},message:"must be string,number"};if(vErrors === null){vErrors = [err9];}else {vErrors.push(err9);}errors++;}var _valid1 = _errs18 === errors;valid6 = valid6 || _valid1;}if(!valid6){const err10 = {instancePath:instancePath+"/old",schemaPath:"#/definitions/MoveData/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};if(vErrors === null){vErrors = [err10];}else {vErrors.push(err10);}errors++;}else {errors = _errs13;if(vErrors !== null){if(_errs13){vErrors.length = _errs13;}else {vErrors = null;}}}}if(data.type !== undefined){let data4 = data.type;if(typeof data4 !== "string"){const err11 = {instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err11];}else {vErrors.push(err11);}errors++;}if(!(data4 === "modify")){const err12 = {instancePath:instancePath+"/type",schemaPath:"#/properties/type/enum",keyword:"enum",params:{allowedValues: schema24.properties.type.enum},message:"must be equal to one of the allowed values"};if(vErrors === null){vErrors = [err12];}else {vErrors.push(err12);}errors++;}}}else {const err13 = {instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err13];}else {vErrors.push(err13);}errors++;}validate22.errors = vErrors;return errors === 0;}const schema27 = {"additionalProperties":false,"properties":{"new":{"$ref":"#/definitions/MoveData"},"type":{"enum":["add"],"type":"string"}},"required":["new","type"],"type":"object"};function validate24(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(data && typeof data == "object" && !Array.isArray(data)){if(data.new === undefined){const err0 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "new"},message:"must have required property '"+"new"+"'"};if(vErrors === null){vErrors = [err0];}else {vErrors.push(err0);}errors++;}if(data.type === undefined){const err1 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "type"},message:"must have required property '"+"type"+"'"};if(vErrors === null){vErrors = [err1];}else {vErrors.push(err1);}errors++;}for(const key0 in data){if(!((key0 === "new") || (key0 === "type"))){delete data[key0];}}if(data.new !== undefined){let data0 = data.new;const _errs4 = errors;let valid2 = false;const _errs5 = errors;if(Array.isArray(data0)){const len0 = data0.length;for(let i0=0; i0<len0; i0++){if(typeof data0[i0] !== "string"){const err2 = {instancePath:instancePath+"/new/" + i0,schemaPath:"#/definitions/MoveData/anyOf/0/items/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err2];}else {vErrors.push(err2);}errors++;}}}else {const err3 = {instancePath:instancePath+"/new",schemaPath:"#/definitions/MoveData/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};if(vErrors === null){vErrors = [err3];}else {vErrors.push(err3);}errors++;}var _valid0 = _errs5 === errors;valid2 = valid2 || _valid0;if(!valid2){const _errs9 = errors;if((typeof data0 !== "string") && (!((typeof data0 == "number") && (isFinite(data0))))){const err4 = {instancePath:instancePath+"/new",schemaPath:"#/definitions/MoveData/anyOf/1/type",keyword:"type",params:{type: schema25.anyOf[1].type},message:"must be string,number"};if(vErrors === null){vErrors = [err4];}else {vErrors.push(err4);}errors++;}var _valid0 = _errs9 === errors;valid2 = valid2 || _valid0;}if(!valid2){const err5 = {instancePath:instancePath+"/new",schemaPath:"#/definitions/MoveData/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};if(vErrors === null){vErrors = [err5];}else {vErrors.push(err5);}errors++;}else {errors = _errs4;if(vErrors !== null){if(_errs4){vErrors.length = _errs4;}else {vErrors = null;}}}}if(data.type !== undefined){let data2 = data.type;if(typeof data2 !== "string"){const err6 = {instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err6];}else {vErrors.push(err6);}errors++;}if(!(data2 === "add")){const err7 = {instancePath:instancePath+"/type",schemaPath:"#/properties/type/enum",keyword:"enum",params:{allowedValues: schema27.properties.type.enum},message:"must be equal to one of the allowed values"};if(vErrors === null){vErrors = [err7];}else {vErrors.push(err7);}errors++;}}}else {const err8 = {instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err8];}else {vErrors.push(err8);}errors++;}validate24.errors = vErrors;return errors === 0;}const schema29 = {"additionalProperties":false,"properties":{"old":{"$ref":"#/definitions/MoveData"},"type":{"enum":["delete"],"type":"string"}},"required":["old","type"],"type":"object"};function validate26(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(data && typeof data == "object" && !Array.isArray(data)){if(data.old === undefined){const err0 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "old"},message:"must have required property '"+"old"+"'"};if(vErrors === null){vErrors = [err0];}else {vErrors.push(err0);}errors++;}if(data.type === undefined){const err1 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "type"},message:"must have required property '"+"type"+"'"};if(vErrors === null){vErrors = [err1];}else {vErrors.push(err1);}errors++;}for(const key0 in data){if(!((key0 === "old") || (key0 === "type"))){delete data[key0];}}if(data.old !== undefined){let data0 = data.old;const _errs4 = errors;let valid2 = false;const _errs5 = errors;if(Array.isArray(data0)){const len0 = data0.length;for(let i0=0; i0<len0; i0++){if(typeof data0[i0] !== "string"){const err2 = {instancePath:instancePath+"/old/" + i0,schemaPath:"#/definitions/MoveData/anyOf/0/items/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err2];}else {vErrors.push(err2);}errors++;}}}else {const err3 = {instancePath:instancePath+"/old",schemaPath:"#/definitions/MoveData/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};if(vErrors === null){vErrors = [err3];}else {vErrors.push(err3);}errors++;}var _valid0 = _errs5 === errors;valid2 = valid2 || _valid0;if(!valid2){const _errs9 = errors;if((typeof data0 !== "string") && (!((typeof data0 == "number") && (isFinite(data0))))){const err4 = {instancePath:instancePath+"/old",schemaPath:"#/definitions/MoveData/anyOf/1/type",keyword:"type",params:{type: schema25.anyOf[1].type},message:"must be string,number"};if(vErrors === null){vErrors = [err4];}else {vErrors.push(err4);}errors++;}var _valid0 = _errs9 === errors;valid2 = valid2 || _valid0;}if(!valid2){const err5 = {instancePath:instancePath+"/old",schemaPath:"#/definitions/MoveData/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};if(vErrors === null){vErrors = [err5];}else {vErrors.push(err5);}errors++;}else {errors = _errs4;if(vErrors !== null){if(_errs4){vErrors.length = _errs4;}else {vErrors = null;}}}}if(data.type !== undefined){let data2 = data.type;if(typeof data2 !== "string"){const err6 = {instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err6];}else {vErrors.push(err6);}errors++;}if(!(data2 === "delete")){const err7 = {instancePath:instancePath+"/type",schemaPath:"#/properties/type/enum",keyword:"enum",params:{allowedValues: schema29.properties.type.enum},message:"must be equal to one of the allowed values"};if(vErrors === null){vErrors = [err7];}else {vErrors.push(err7);}errors++;}}}else {const err8 = {instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err8];}else {vErrors.push(err8);}errors++;}validate26.errors = vErrors;return errors === 0;}function validate21(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(data && typeof data == "object" && !Array.isArray(data)){for(const key0 in data){if(!((key0 === "moveName") || (key0 === "moveOrder"))){let data0 = data[key0];const _errs3 = errors;let valid1 = false;const _errs4 = errors;if(!(validate22(data0, {instancePath:instancePath+"/" + key0.replace(/~/g, "~0").replace(/\//g, "~1"),parentData:data,parentDataProperty:key0,rootData}))){vErrors = vErrors === null ? validate22.errors : vErrors.concat(validate22.errors);errors = vErrors.length;}var _valid0 = _errs4 === errors;valid1 = valid1 || _valid0;if(!valid1){const _errs5 = errors;if(!(validate24(data0, {instancePath:instancePath+"/" + key0.replace(/~/g, "~0").replace(/\//g, "~1"),parentData:data,parentDataProperty:key0,rootData}))){vErrors = vErrors === null ? validate24.errors : vErrors.concat(validate24.errors);errors = vErrors.length;}var _valid0 = _errs5 === errors;valid1 = valid1 || _valid0;if(!valid1){const _errs6 = errors;if(!(validate26(data0, {instancePath:instancePath+"/" + key0.replace(/~/g, "~0").replace(/\//g, "~1"),parentData:data,parentDataProperty:key0,rootData}))){vErrors = vErrors === null ? validate26.errors : vErrors.concat(validate26.errors);errors = vErrors.length;}var _valid0 = _errs6 === errors;valid1 = valid1 || _valid0;}}if(!valid1){const err0 = {instancePath:instancePath+"/" + key0.replace(/~/g, "~0").replace(/\//g, "~1"),schemaPath:"#/additionalProperties/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};if(vErrors === null){vErrors = [err0];}else {vErrors.push(err0);}errors++;}else {errors = _errs3;if(vErrors !== null){if(_errs3){vErrors.length = _errs3;}else {vErrors = null;}}}}}if(data.moveName !== undefined){let data1 = data.moveName;const _errs8 = errors;let valid3 = false;const _errs9 = errors;if(data1 && typeof data1 == "object" && !Array.isArray(data1)){if(data1.new === undefined){const err1 = {instancePath:instancePath+"/moveName",schemaPath:"#/definitions/Add<string>/required",keyword:"required",params:{missingProperty: "new"},message:"must have required property '"+"new"+"'"};if(vErrors === null){vErrors = [err1];}else {vErrors.push(err1);}errors++;}if(data1.type === undefined){const err2 = {instancePath:instancePath+"/moveName",schemaPath:"#/definitions/Add<string>/required",keyword:"required",params:{missingProperty: "type"},message:"must have required property '"+"type"+"'"};if(vErrors === null){vErrors = [err2];}else {vErrors.push(err2);}errors++;}for(const key1 in data1){if(!((key1 === "new") || (key1 === "type"))){delete data1[key1];}}if(data1.new !== undefined){if(typeof data1.new !== "string"){const err3 = {instancePath:instancePath+"/moveName/new",schemaPath:"#/definitions/Add<string>/properties/new/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err3];}else {vErrors.push(err3);}errors++;}}if(data1.type !== undefined){let data3 = data1.type;if(typeof data3 !== "string"){const err4 = {instancePath:instancePath+"/moveName/type",schemaPath:"#/definitions/Add<string>/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err4];}else {vErrors.push(err4);}errors++;}if(!(data3 === "add")){const err5 = {instancePath:instancePath+"/moveName/type",schemaPath:"#/definitions/Add<string>/properties/type/enum",keyword:"enum",params:{allowedValues: schema31.properties.type.enum},message:"must be equal to one of the allowed values"};if(vErrors === null){vErrors = [err5];}else {vErrors.push(err5);}errors++;}}}else {const err6 = {instancePath:instancePath+"/moveName",schemaPath:"#/definitions/Add<string>/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err6];}else {vErrors.push(err6);}errors++;}var _valid1 = _errs9 === errors;valid3 = valid3 || _valid1;if(!valid3){const _errs17 = errors;if(data1 && typeof data1 == "object" && !Array.isArray(data1)){if(data1.old === undefined){const err7 = {instancePath:instancePath+"/moveName",schemaPath:"#/definitions/Delete<string>/required",keyword:"required",params:{missingProperty: "old"},message:"must have required property '"+"old"+"'"};if(vErrors === null){vErrors = [err7];}else {vErrors.push(err7);}errors++;}if(data1.type === undefined){const err8 = {instancePath:instancePath+"/moveName",schemaPath:"#/definitions/Delete<string>/required",keyword:"required",params:{missingProperty: "type"},message:"must have required property '"+"type"+"'"};if(vErrors === null){vErrors = [err8];}else {vErrors.push(err8);}errors++;}for(const key2 in data1){if(!((key2 === "old") || (key2 === "type"))){delete data1[key2];}}if(data1.old !== undefined){if(typeof data1.old !== "string"){const err9 = {instancePath:instancePath+"/moveName/old",schemaPath:"#/definitions/Delete<string>/properties/old/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err9];}else {vErrors.push(err9);}errors++;}}if(data1.type !== undefined){let data5 = data1.type;if(typeof data5 !== "string"){const err10 = {instancePath:instancePath+"/moveName/type",schemaPath:"#/definitions/Delete<string>/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err10];}else {vErrors.push(err10);}errors++;}if(!(data5 === "delete")){const err11 = {instancePath:instancePath+"/moveName/type",schemaPath:"#/definitions/Delete<string>/properties/type/enum",keyword:"enum",params:{allowedValues: schema32.properties.type.enum},message:"must be equal to one of the allowed values"};if(vErrors === null){vErrors = [err11];}else {vErrors.push(err11);}errors++;}}}else {const err12 = {instancePath:instancePath+"/moveName",schemaPath:"#/definitions/Delete<string>/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err12];}else {vErrors.push(err12);}errors++;}var _valid1 = _errs17 === errors;valid3 = valid3 || _valid1;}if(!valid3){const err13 = {instancePath:instancePath+"/moveName",schemaPath:"#/properties/moveName/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};if(vErrors === null){vErrors = [err13];}else {vErrors.push(err13);}errors++;}else {errors = _errs8;if(vErrors !== null){if(_errs8){vErrors.length = _errs8;}else {vErrors = null;}}}}if(data.moveOrder !== undefined){const err14 = {instancePath:instancePath+"/moveOrder",schemaPath:"#/properties/moveOrder/false schema",keyword:"false schema",params:{},message:"boolean schema is false"};if(vErrors === null){vErrors = [err14];}else {vErrors.push(err14);}errors++;}}else {const err15 = {instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err15];}else {vErrors.push(err15);}errors++;}validate21.errors = vErrors;return errors === 0;}const schema33 = {"additionalProperties":{"anyOf":[{"$ref":"#/definitions/Modify<PropData>"},{"$ref":"#/definitions/Add<PropData>"},{"$ref":"#/definitions/Delete<PropData>"}]},"properties":{"moveName":false,"moveOrder":{"$ref":"#/definitions/Modify<MoveOrder[]>"}},"type":"object"};const schema34 = {"additionalProperties":false,"properties":{"new":{"$ref":"#/definitions/PropData"},"old":{"$ref":"#/definitions/PropData"},"type":{"enum":["modify"],"type":"string"}},"required":["new","old","type"],"type":"object"};const schema35 = {"anyOf":[{"items":{"type":"string"},"type":"array"},{"items":{"$ref":"#/definitions/MoveOrder"},"type":"array"},{"type":["string","number"]}]};const schema36 = {"additionalProperties":false,"properties":{"indent":{"type":"number"},"isCategory":{"enum":[true],"type":"boolean"},"name":{"type":"string"}},"required":["name"],"type":"object"};function validate31(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;const _errs0 = errors;let valid0 = false;const _errs1 = errors;if(Array.isArray(data)){const len0 = data.length;for(let i0=0; i0<len0; i0++){if(typeof data[i0] !== "string"){const err0 = {instancePath:instancePath+"/" + i0,schemaPath:"#/anyOf/0/items/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err0];}else {vErrors.push(err0);}errors++;}}}else {const err1 = {instancePath,schemaPath:"#/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};if(vErrors === null){vErrors = [err1];}else {vErrors.push(err1);}errors++;}var _valid0 = _errs1 === errors;valid0 = valid0 || _valid0;if(!valid0){const _errs5 = errors;if(Array.isArray(data)){const len1 = data.length;for(let i1=0; i1<len1; i1++){let data1 = data[i1];if(data1 && typeof data1 == "object" && !Array.isArray(data1)){if(data1.name === undefined){const err2 = {instancePath:instancePath+"/" + i1,schemaPath:"#/definitions/MoveOrder/required",keyword:"required",params:{missingProperty: "name"},message:"must have required property '"+"name"+"'"};if(vErrors === null){vErrors = [err2];}else {vErrors.push(err2);}errors++;}for(const key0 in data1){if(!(((key0 === "indent") || (key0 === "isCategory")) || (key0 === "name"))){delete data1[key0];}}if(data1.indent !== undefined){let data2 = data1.indent;if(!((typeof data2 == "number") && (isFinite(data2)))){const err3 = {instancePath:instancePath+"/" + i1+"/indent",schemaPath:"#/definitions/MoveOrder/properties/indent/type",keyword:"type",params:{type: "number"},message:"must be number"};if(vErrors === null){vErrors = [err3];}else {vErrors.push(err3);}errors++;}}if(data1.isCategory !== undefined){let data3 = data1.isCategory;if(typeof data3 !== "boolean"){const err4 = {instancePath:instancePath+"/" + i1+"/isCategory",schemaPath:"#/definitions/MoveOrder/properties/isCategory/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};if(vErrors === null){vErrors = [err4];}else {vErrors.push(err4);}errors++;}if(!(data3 === true)){const err5 = {instancePath:instancePath+"/" + i1+"/isCategory",schemaPath:"#/definitions/MoveOrder/properties/isCategory/enum",keyword:"enum",params:{allowedValues: schema36.properties.isCategory.enum},message:"must be equal to one of the allowed values"};if(vErrors === null){vErrors = [err5];}else {vErrors.push(err5);}errors++;}}if(data1.name !== undefined){if(typeof data1.name !== "string"){const err6 = {instancePath:instancePath+"/" + i1+"/name",schemaPath:"#/definitions/MoveOrder/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err6];}else {vErrors.push(err6);}errors++;}}}else {const err7 = {instancePath:instancePath+"/" + i1,schemaPath:"#/definitions/MoveOrder/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err7];}else {vErrors.push(err7);}errors++;}}}else {const err8 = {instancePath,schemaPath:"#/anyOf/1/type",keyword:"type",params:{type: "array"},message:"must be array"};if(vErrors === null){vErrors = [err8];}else {vErrors.push(err8);}errors++;}var _valid0 = _errs5 === errors;valid0 = valid0 || _valid0;if(!valid0){const _errs17 = errors;if((typeof data !== "string") && (!((typeof data == "number") && (isFinite(data))))){const err9 = {instancePath,schemaPath:"#/anyOf/2/type",keyword:"type",params:{type: schema35.anyOf[2].type},message:"must be string,number"};if(vErrors === null){vErrors = [err9];}else {vErrors.push(err9);}errors++;}var _valid0 = _errs17 === errors;valid0 = valid0 || _valid0;}}if(!valid0){const err10 = {instancePath,schemaPath:"#/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};if(vErrors === null){vErrors = [err10];}else {vErrors.push(err10);}errors++;}else {errors = _errs0;if(vErrors !== null){if(_errs0){vErrors.length = _errs0;}else {vErrors = null;}}}validate31.errors = vErrors;return errors === 0;}function validate30(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(data && typeof data == "object" && !Array.isArray(data)){if(data.new === undefined){const err0 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "new"},message:"must have required property '"+"new"+"'"};if(vErrors === null){vErrors = [err0];}else {vErrors.push(err0);}errors++;}if(data.old === undefined){const err1 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "old"},message:"must have required property '"+"old"+"'"};if(vErrors === null){vErrors = [err1];}else {vErrors.push(err1);}errors++;}if(data.type === undefined){const err2 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "type"},message:"must have required property '"+"type"+"'"};if(vErrors === null){vErrors = [err2];}else {vErrors.push(err2);}errors++;}for(const key0 in data){if(!(((key0 === "new") || (key0 === "old")) || (key0 === "type"))){delete data[key0];}}if(data.new !== undefined){if(!(validate31(data.new, {instancePath:instancePath+"/new",parentData:data,parentDataProperty:"new",rootData}))){vErrors = vErrors === null ? validate31.errors : vErrors.concat(validate31.errors);errors = vErrors.length;}}if(data.old !== undefined){if(!(validate31(data.old, {instancePath:instancePath+"/old",parentData:data,parentDataProperty:"old",rootData}))){vErrors = vErrors === null ? validate31.errors : vErrors.concat(validate31.errors);errors = vErrors.length;}}if(data.type !== undefined){let data2 = data.type;if(typeof data2 !== "string"){const err3 = {instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err3];}else {vErrors.push(err3);}errors++;}if(!(data2 === "modify")){const err4 = {instancePath:instancePath+"/type",schemaPath:"#/properties/type/enum",keyword:"enum",params:{allowedValues: schema34.properties.type.enum},message:"must be equal to one of the allowed values"};if(vErrors === null){vErrors = [err4];}else {vErrors.push(err4);}errors++;}}}else {const err5 = {instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err5];}else {vErrors.push(err5);}errors++;}validate30.errors = vErrors;return errors === 0;}const schema37 = {"additionalProperties":false,"properties":{"new":{"$ref":"#/definitions/PropData"},"type":{"enum":["add"],"type":"string"}},"required":["new","type"],"type":"object"};function validate35(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(data && typeof data == "object" && !Array.isArray(data)){if(data.new === undefined){const err0 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "new"},message:"must have required property '"+"new"+"'"};if(vErrors === null){vErrors = [err0];}else {vErrors.push(err0);}errors++;}if(data.type === undefined){const err1 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "type"},message:"must have required property '"+"type"+"'"};if(vErrors === null){vErrors = [err1];}else {vErrors.push(err1);}errors++;}for(const key0 in data){if(!((key0 === "new") || (key0 === "type"))){delete data[key0];}}if(data.new !== undefined){if(!(validate31(data.new, {instancePath:instancePath+"/new",parentData:data,parentDataProperty:"new",rootData}))){vErrors = vErrors === null ? validate31.errors : vErrors.concat(validate31.errors);errors = vErrors.length;}}if(data.type !== undefined){let data1 = data.type;if(typeof data1 !== "string"){const err2 = {instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err2];}else {vErrors.push(err2);}errors++;}if(!(data1 === "add")){const err3 = {instancePath:instancePath+"/type",schemaPath:"#/properties/type/enum",keyword:"enum",params:{allowedValues: schema37.properties.type.enum},message:"must be equal to one of the allowed values"};if(vErrors === null){vErrors = [err3];}else {vErrors.push(err3);}errors++;}}}else {const err4 = {instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err4];}else {vErrors.push(err4);}errors++;}validate35.errors = vErrors;return errors === 0;}const schema38 = {"additionalProperties":false,"properties":{"old":{"$ref":"#/definitions/PropData"},"type":{"enum":["delete"],"type":"string"}},"required":["old","type"],"type":"object"};function validate38(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(data && typeof data == "object" && !Array.isArray(data)){if(data.old === undefined){const err0 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "old"},message:"must have required property '"+"old"+"'"};if(vErrors === null){vErrors = [err0];}else {vErrors.push(err0);}errors++;}if(data.type === undefined){const err1 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "type"},message:"must have required property '"+"type"+"'"};if(vErrors === null){vErrors = [err1];}else {vErrors.push(err1);}errors++;}for(const key0 in data){if(!((key0 === "old") || (key0 === "type"))){delete data[key0];}}if(data.old !== undefined){if(!(validate31(data.old, {instancePath:instancePath+"/old",parentData:data,parentDataProperty:"old",rootData}))){vErrors = vErrors === null ? validate31.errors : vErrors.concat(validate31.errors);errors = vErrors.length;}}if(data.type !== undefined){let data1 = data.type;if(typeof data1 !== "string"){const err2 = {instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err2];}else {vErrors.push(err2);}errors++;}if(!(data1 === "delete")){const err3 = {instancePath:instancePath+"/type",schemaPath:"#/properties/type/enum",keyword:"enum",params:{allowedValues: schema38.properties.type.enum},message:"must be equal to one of the allowed values"};if(vErrors === null){vErrors = [err3];}else {vErrors.push(err3);}errors++;}}}else {const err4 = {instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err4];}else {vErrors.push(err4);}errors++;}validate38.errors = vErrors;return errors === 0;}const schema39 = {"additionalProperties":false,"properties":{"new":{"items":{"$ref":"#/definitions/MoveOrder"},"type":"array"},"old":{"items":{"$ref":"#/definitions/MoveOrder"},"type":"array"},"type":{"enum":["modify"],"type":"string"}},"required":["new","old","type"],"type":"object"};function validate41(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(data && typeof data == "object" && !Array.isArray(data)){if(data.new === undefined){const err0 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "new"},message:"must have required property '"+"new"+"'"};if(vErrors === null){vErrors = [err0];}else {vErrors.push(err0);}errors++;}if(data.old === undefined){const err1 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "old"},message:"must have required property '"+"old"+"'"};if(vErrors === null){vErrors = [err1];}else {vErrors.push(err1);}errors++;}if(data.type === undefined){const err2 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "type"},message:"must have required property '"+"type"+"'"};if(vErrors === null){vErrors = [err2];}else {vErrors.push(err2);}errors++;}for(const key0 in data){if(!(((key0 === "new") || (key0 === "old")) || (key0 === "type"))){delete data[key0];}}if(data.new !== undefined){let data0 = data.new;if(Array.isArray(data0)){const len0 = data0.length;for(let i0=0; i0<len0; i0++){let data1 = data0[i0];if(data1 && typeof data1 == "object" && !Array.isArray(data1)){if(data1.name === undefined){const err3 = {instancePath:instancePath+"/new/" + i0,schemaPath:"#/definitions/MoveOrder/required",keyword:"required",params:{missingProperty: "name"},message:"must have required property '"+"name"+"'"};if(vErrors === null){vErrors = [err3];}else {vErrors.push(err3);}errors++;}for(const key1 in data1){if(!(((key1 === "indent") || (key1 === "isCategory")) || (key1 === "name"))){delete data1[key1];}}if(data1.indent !== undefined){let data2 = data1.indent;if(!((typeof data2 == "number") && (isFinite(data2)))){const err4 = {instancePath:instancePath+"/new/" + i0+"/indent",schemaPath:"#/definitions/MoveOrder/properties/indent/type",keyword:"type",params:{type: "number"},message:"must be number"};if(vErrors === null){vErrors = [err4];}else {vErrors.push(err4);}errors++;}}if(data1.isCategory !== undefined){let data3 = data1.isCategory;if(typeof data3 !== "boolean"){const err5 = {instancePath:instancePath+"/new/" + i0+"/isCategory",schemaPath:"#/definitions/MoveOrder/properties/isCategory/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};if(vErrors === null){vErrors = [err5];}else {vErrors.push(err5);}errors++;}if(!(data3 === true)){const err6 = {instancePath:instancePath+"/new/" + i0+"/isCategory",schemaPath:"#/definitions/MoveOrder/properties/isCategory/enum",keyword:"enum",params:{allowedValues: schema36.properties.isCategory.enum},message:"must be equal to one of the allowed values"};if(vErrors === null){vErrors = [err6];}else {vErrors.push(err6);}errors++;}}if(data1.name !== undefined){if(typeof data1.name !== "string"){const err7 = {instancePath:instancePath+"/new/" + i0+"/name",schemaPath:"#/definitions/MoveOrder/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err7];}else {vErrors.push(err7);}errors++;}}}else {const err8 = {instancePath:instancePath+"/new/" + i0,schemaPath:"#/definitions/MoveOrder/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err8];}else {vErrors.push(err8);}errors++;}}}else {const err9 = {instancePath:instancePath+"/new",schemaPath:"#/properties/new/type",keyword:"type",params:{type: "array"},message:"must be array"};if(vErrors === null){vErrors = [err9];}else {vErrors.push(err9);}errors++;}}if(data.old !== undefined){let data5 = data.old;if(Array.isArray(data5)){const len1 = data5.length;for(let i1=0; i1<len1; i1++){let data6 = data5[i1];if(data6 && typeof data6 == "object" && !Array.isArray(data6)){if(data6.name === undefined){const err10 = {instancePath:instancePath+"/old/" + i1,schemaPath:"#/definitions/MoveOrder/required",keyword:"required",params:{missingProperty: "name"},message:"must have required property '"+"name"+"'"};if(vErrors === null){vErrors = [err10];}else {vErrors.push(err10);}errors++;}for(const key2 in data6){if(!(((key2 === "indent") || (key2 === "isCategory")) || (key2 === "name"))){delete data6[key2];}}if(data6.indent !== undefined){let data7 = data6.indent;if(!((typeof data7 == "number") && (isFinite(data7)))){const err11 = {instancePath:instancePath+"/old/" + i1+"/indent",schemaPath:"#/definitions/MoveOrder/properties/indent/type",keyword:"type",params:{type: "number"},message:"must be number"};if(vErrors === null){vErrors = [err11];}else {vErrors.push(err11);}errors++;}}if(data6.isCategory !== undefined){let data8 = data6.isCategory;if(typeof data8 !== "boolean"){const err12 = {instancePath:instancePath+"/old/" + i1+"/isCategory",schemaPath:"#/definitions/MoveOrder/properties/isCategory/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};if(vErrors === null){vErrors = [err12];}else {vErrors.push(err12);}errors++;}if(!(data8 === true)){const err13 = {instancePath:instancePath+"/old/" + i1+"/isCategory",schemaPath:"#/definitions/MoveOrder/properties/isCategory/enum",keyword:"enum",params:{allowedValues: schema36.properties.isCategory.enum},message:"must be equal to one of the allowed values"};if(vErrors === null){vErrors = [err13];}else {vErrors.push(err13);}errors++;}}if(data6.name !== undefined){if(typeof data6.name !== "string"){const err14 = {instancePath:instancePath+"/old/" + i1+"/name",schemaPath:"#/definitions/MoveOrder/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err14];}else {vErrors.push(err14);}errors++;}}}else {const err15 = {instancePath:instancePath+"/old/" + i1,schemaPath:"#/definitions/MoveOrder/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err15];}else {vErrors.push(err15);}errors++;}}}else {const err16 = {instancePath:instancePath+"/old",schemaPath:"#/properties/old/type",keyword:"type",params:{type: "array"},message:"must be array"};if(vErrors === null){vErrors = [err16];}else {vErrors.push(err16);}errors++;}}if(data.type !== undefined){let data10 = data.type;if(typeof data10 !== "string"){const err17 = {instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err17];}else {vErrors.push(err17);}errors++;}if(!(data10 === "modify")){const err18 = {instancePath:instancePath+"/type",schemaPath:"#/properties/type/enum",keyword:"enum",params:{allowedValues: schema39.properties.type.enum},message:"must be equal to one of the allowed values"};if(vErrors === null){vErrors = [err18];}else {vErrors.push(err18);}errors++;}}}else {const err19 = {instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err19];}else {vErrors.push(err19);}errors++;}validate41.errors = vErrors;return errors === 0;}function validate29(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(data && typeof data == "object" && !Array.isArray(data)){for(const key0 in data){if(!((key0 === "moveName") || (key0 === "moveOrder"))){let data0 = data[key0];const _errs3 = errors;let valid1 = false;const _errs4 = errors;if(!(validate30(data0, {instancePath:instancePath+"/" + key0.replace(/~/g, "~0").replace(/\//g, "~1"),parentData:data,parentDataProperty:key0,rootData}))){vErrors = vErrors === null ? validate30.errors : vErrors.concat(validate30.errors);errors = vErrors.length;}var _valid0 = _errs4 === errors;valid1 = valid1 || _valid0;if(!valid1){const _errs5 = errors;if(!(validate35(data0, {instancePath:instancePath+"/" + key0.replace(/~/g, "~0").replace(/\//g, "~1"),parentData:data,parentDataProperty:key0,rootData}))){vErrors = vErrors === null ? validate35.errors : vErrors.concat(validate35.errors);errors = vErrors.length;}var _valid0 = _errs5 === errors;valid1 = valid1 || _valid0;if(!valid1){const _errs6 = errors;if(!(validate38(data0, {instancePath:instancePath+"/" + key0.replace(/~/g, "~0").replace(/\//g, "~1"),parentData:data,parentDataProperty:key0,rootData}))){vErrors = vErrors === null ? validate38.errors : vErrors.concat(validate38.errors);errors = vErrors.length;}var _valid0 = _errs6 === errors;valid1 = valid1 || _valid0;}}if(!valid1){const err0 = {instancePath:instancePath+"/" + key0.replace(/~/g, "~0").replace(/\//g, "~1"),schemaPath:"#/additionalProperties/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};if(vErrors === null){vErrors = [err0];}else {vErrors.push(err0);}errors++;}else {errors = _errs3;if(vErrors !== null){if(_errs3){vErrors.length = _errs3;}else {vErrors = null;}}}}}if(data.moveName !== undefined){const err1 = {instancePath:instancePath+"/moveName",schemaPath:"#/properties/moveName/false schema",keyword:"false schema",params:{},message:"boolean schema is false"};if(vErrors === null){vErrors = [err1];}else {vErrors.push(err1);}errors++;}if(data.moveOrder !== undefined){if(!(validate41(data.moveOrder, {instancePath:instancePath+"/moveOrder",parentData:data,parentDataProperty:"moveOrder",rootData}))){vErrors = vErrors === null ? validate41.errors : vErrors.concat(validate41.errors);errors = vErrors.length;}}}else {const err2 = {instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err2];}else {vErrors.push(err2);}errors++;}validate29.errors = vErrors;return errors === 0;}const pattern0 = new RegExp("^[\\w\\-.~]{3,25}$", "u");const pattern1 = new RegExp("^[\\d.]{1,10}$", "u");function validate20(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(data && typeof data == "object" && !Array.isArray(data)){if(data.baseRevision === undefined){const err0 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "baseRevision"},message:"must have required property '"+"baseRevision"+"'"};if(vErrors === null){vErrors = [err0];}else {vErrors.push(err0);}errors++;}if(data.createdAt === undefined){const err1 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "createdAt"},message:"must have required property '"+"createdAt"+"'"};if(vErrors === null){vErrors = [err1];}else {vErrors.push(err1);}errors++;}if(data.createdBy === undefined){const err2 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "createdBy"},message:"must have required property '"+"createdBy"+"'"};if(vErrors === null){vErrors = [err2];}else {vErrors.push(err2);}errors++;}if(data.updateTitle === undefined){const err3 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "updateTitle"},message:"must have required property '"+"updateTitle"+"'"};if(vErrors === null){vErrors = [err3];}else {vErrors.push(err3);}errors++;}for(const key0 in data){if(!(func4.call(schema22.properties, key0))){delete data[key0];}}if(data.baseRevision !== undefined){if(typeof data.baseRevision !== "string"){const err4 = {instancePath:instancePath+"/baseRevision",schemaPath:"#/properties/baseRevision/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err4];}else {vErrors.push(err4);}errors++;}}if(data.createdAt !== undefined){if(typeof data.createdAt !== "string"){const err5 = {instancePath:instancePath+"/createdAt",schemaPath:"#/properties/createdAt/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err5];}else {vErrors.push(err5);}errors++;}}if(data.createdBy !== undefined){if(typeof data.createdBy !== "string"){const err6 = {instancePath:instancePath+"/createdBy",schemaPath:"#/properties/createdBy/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err6];}else {vErrors.push(err6);}errors++;}}if(data.moveChanges !== undefined){let data3 = data.moveChanges;if(data3 && typeof data3 == "object" && !Array.isArray(data3)){for(const key1 in data3){if(!(validate21(data3[key1], {instancePath:instancePath+"/moveChanges/" + key1.replace(/~/g, "~0").replace(/\//g, "~1"),parentData:data3,parentDataProperty:key1,rootData}))){vErrors = vErrors === null ? validate21.errors : vErrors.concat(validate21.errors);errors = vErrors.length;}}}else {const err7 = {instancePath:instancePath+"/moveChanges",schemaPath:"#/properties/moveChanges/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err7];}else {vErrors.push(err7);}errors++;}}if(data.previousChange !== undefined){if(typeof data.previousChange !== "string"){const err8 = {instancePath:instancePath+"/previousChange",schemaPath:"#/properties/previousChange/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err8];}else {vErrors.push(err8);}errors++;}}if(data.universalPropChanges !== undefined){if(!(validate29(data.universalPropChanges, {instancePath:instancePath+"/universalPropChanges",parentData:data,parentDataProperty:"universalPropChanges",rootData}))){vErrors = vErrors === null ? validate29.errors : vErrors.concat(validate29.errors);errors = vErrors.length;}}if(data.updateDescription !== undefined){let data7 = data.updateDescription;if(typeof data7 === "string"){if(func5(data7) > 250){const err9 = {instancePath:instancePath+"/updateDescription",schemaPath:"#/properties/updateDescription/maxLength",keyword:"maxLength",params:{limit: 250},message:"must NOT have more than 250 characters"};if(vErrors === null){vErrors = [err9];}else {vErrors.push(err9);}errors++;}}else {const err10 = {instancePath:instancePath+"/updateDescription",schemaPath:"#/properties/updateDescription/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err10];}else {vErrors.push(err10);}errors++;}}if(data.updateTitle !== undefined){let data8 = data.updateTitle;if(typeof data8 === "string"){if(!pattern0.test(data8)){const err11 = {instancePath:instancePath+"/updateTitle",schemaPath:"#/properties/updateTitle/pattern",keyword:"pattern",params:{pattern: "^[\\w\\-.~]{3,25}$"},message:"must match pattern \""+"^[\\w\\-.~]{3,25}$"+"\""};if(vErrors === null){vErrors = [err11];}else {vErrors.push(err11);}errors++;}}else {const err12 = {instancePath:instancePath+"/updateTitle",schemaPath:"#/properties/updateTitle/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err12];}else {vErrors.push(err12);}errors++;}}if(data.updateVersion !== undefined){let data9 = data.updateVersion;if(typeof data9 === "string"){if(!pattern1.test(data9)){const err13 = {instancePath:instancePath+"/updateVersion",schemaPath:"#/properties/updateVersion/pattern",keyword:"pattern",params:{pattern: "^[\\d.]{1,10}$"},message:"must match pattern \""+"^[\\d.]{1,10}$"+"\""};if(vErrors === null){vErrors = [err13];}else {vErrors.push(err13);}errors++;}}else {const err14 = {instancePath:instancePath+"/updateVersion",schemaPath:"#/properties/updateVersion/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err14];}else {vErrors.push(err14);}errors++;}}}else {const err15 = {instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err15];}else {vErrors.push(err15);}errors++;}validate20.errors = vErrors;return errors === 0;}